pipeline {
    agent { label "OneS" }
    parameters {
            string(defaultValue: "4.0.50.1", description: 'Старая версия', name: 'oldversion_1')
            string(defaultValue: "4.0.51.1", description: 'Новая версия', name: 'newversion_1')
            string(defaultValue: "8.3.24.1368", description: 'Версия платформы 1с', name: 'platformversion_1')
            string(defaultValue: "3.0.37.11710", description: 'Версия СЛК', name: 'slkversion')
    }
    environment {
        allureReportUrl = "${env.JENKINS_URL}job/${env.JOB_NAME.replaceAll('/', '/job/')}/${env.BUILD_NUMBER}/allure"
        allureResultsDir = "${env.WORKSPACE.replace('\\', '\\\\')}\\\\results"
        VRUNNER_PATH = 'vrunner'
    }
    stages {
      stage("Инициализация параметров") {
        steps {
            script {
                def config = readYaml file: 'SBORKA/STOMA/config.yaml'
                def product
                
                if (params.Product.contains('FITNESSCORP')) {
                    product = 'fitnesscorp'
                } else if (params.Product.contains('STOMA')) {
                    product = 'stoma'
                } else {
                    error "Неизвестный продукт: ${params.Product}. Ожидается 'FITNESSCORP' или 'STOMA'."
                }

                println "Target path: ${config.products[product].target_path}"
            }
        }
    }

        stage('Обновление документации') {
            steps {
                script {
                    def scriptPath = 'SBORKA/records/delete_folders_and_files.py'
                    def scriptPath1 = 'SBORKA/records/update_files_and_contents.py'
                    def scriptPath2 = 'SBORKA/records/process_files.py'
                    sh "python -X utf8 ${scriptPath} \"${config.products[product].target_path}\""
                    sh "python -X utf8 ${scriptPath1} \"${config.products[product].sourceDirectory}\" \"${config.products[product].target_path}\" \"${params.oldversion_1}\" \"${params.newversion_1}\" \"${params.platformversion_1}\" \"${params.slkversion}\" \"${config.products[product].sbor}\""
                    sh "python -X utf8 ${scriptPath2} \"${params.oldversion_1}\" \"${params.newversion_1}\" \"${config.products[product].sampleEdf}\" \"${config.products[product].fbrb}\""
                }
            }
        }
        stage("Обновление конфигурации из релизного хранилища") {
            steps{
                script {
					bat """
					chcp 65001
					@call ${VRUNNER_PATH} session kill --with-nolock --db ${config.products[product].releaseServer} --db-user ${config.products[product].releaseUser}
					@call ${VRUNNER_PATH} loadrepo --storage-name ${config.products[product].relrepositoy} --storage-user ${config.products[product].varepositoryUser} --ibconnection /Slocalhost/${config.products[product].releaseServer} --db-user ${config.products[product].releaseUser}
					@call ${VRUNNER_PATH} updatedb --ibconnection /Slocalhost/${config.products[product].releaseServer} --db-user ${config.products[product].releaseUser}
                    """
                }
            }
        }
        stage("Обновление мессенджера из хранилища") {
            steps{  
                script {
                    if (params.Product.contains('FINTESSCORP')) {
                        bat """
                        chcp 65001
                        @call ${VRUNNER_PATH} loadrepo --storage-name http://192.168.2.16/hran1c/repository.1ccr/fitness4_messenger_release --storage-user МихаилБ --extension ${config.products[product].extensionNamemess} --ibconnection /Slocalhost/${config.products[product].releaseServer} --db-user ${config.products[product].releaseUser}
                        @call ${VRUNNER_PATH} updateext ${config.products[product].extensionNamemess} --ibconnection /Slocalhost/${config.products[product].releaseServer} --db-user ${config.products[product].releaseUser}
                        """
					}else if (params.Product.contains('FITNESS')) {
                        //
					}else if (params.Product.contains('SPASALON')) {
                        //
					}else if (params.Product.contains('SALON')) {
                        //
					}else if (params.Product.contains('STOMA')) {
                        bat """
                        chcp 65001
                        @call ${VRUNNER_PATH} loadrepo --storage-name http://192.168.2.16/hran1c/repository.1ccr/stomatology2_messenger_release --storage-user МихаилБ --extension ${config.products[product].extensionNamemess} --ibconnection /Slocalhost/${config.products[product].releaseServer} --db-user ${config.products[product].releaseUser}
                        @call ${VRUNNER_PATH} updateext ${config.products[product].extensionNamemess} --ibconnection /Slocalhost/${config.products[product].releaseServer} --db-user ${config.products[product].releaseUser}
                        """
                    }
                }
            }
        }
        stage("Обновление журнала записи из хранилища") {
            when { expression {params.Product.contains('STOMA') } }
            steps{
                script {
                    bat """
                    chcp 65001
                    @call ${VRUNNER_PATH} loadrepo --storage-name http://192.168.2.16/hran1c/repository.1ccr/stomatology2_shedule --storage-user МихаилБ --extension ${config.products[product].extensionNamejurnal} --ibconnection /Slocalhost/${config.products[product].releaseServer} --db-user ${config.products[product].releaseUser}
                    @call ${VRUNNER_PATH} updateext ${config.products[product].extensionNamejurnal} --ibconnection /Slocalhost/${config.products[product].releaseServer} --db-user ${config.products[product].releaseUser}
                    """
                    }
                }
            }
        stage("Выгрузка конфигураций и расширений из хранилища") {
            steps{
                script {
                    bat """
                    chcp 65001
                    @call ${VRUNNER_PATH} unload ${config.products[product].fbrb}\\1Cv8.cf --ibconnection /Slocalhost/${config.products[product].releaseServer} --db-user ${config.products[product].releaseUser}
                    @call ${VRUNNER_PATH} unloadext ${config.products[product].fbrb}\\messenger.cfe ${config.products[product].extensionNamemess} --ibconnection /Slocalhost/${config.products[product].releaseServer} --db-user ${config.products[product].releaseUser}
                    """
                    if (params.Product.contains('STOMA')) {
                        bat """
                        chcp 65001
                        @call ${VRUNNER_PATH} unloadext ${config.products[product].fbrb}\\jurnal.cfe ${config.products[product].extensionNamejurnal} --ibconnection /Slocalhost/${config.products[product].releaseServer} --db-user ${config.products[product].releaseUser}
                        """
					}

                }
            }
        }
        stage('Шифрование расширения') {
            when { expression {params.Product.contains('STOMA') } }
            steps {
                script{
                    bat """
                    start ${config.products[product].netlenka}\\Netlenka1C.exe --mode=prof --source ${config.products[product].fbrb}\\jurnal.cfe --createpdb
                    exit
                    """
                }
            }
        }
        stage('Загрузка .cf в базу для сборки релиза') {
            steps {
                script {
                    bat """
                    chcp 65001
                    @call ${VRUNNER_PATH} load --src ${config.products[product].fbrb}\\1Cv8.cf --ibconnection /S${config.products[product].baseBuild} --db-user "${config.products[product].buildUser}"
                    @call ${VRUNNER_PATH} updatedb --ibconnection /S${config.products[product].baseBuild} --db-user "${config.products[product].buildUser}"
                    """
                }
            }
        }
        stage("Обновление базы в режиме 1С:Предприятие") {
            steps {
                script{
                    bat """
                    chcp 65001
                    @call ${VRUNNER_PATH}  run --command ЗавершитьРаботуСистемы; --ibconnection /S${config.products[product].baseBuild} --db-user "${config.products[product].buildUser}" --execute "${config.products[product].epfvrunner}\\ЗакрытьПредприятие.epf"
                    """
                }
            }
        }
        stage('Пауза') {
            steps {
               script{
                    def messageText = """Сборка приостановлена. Необходимо создать внешнюю обработку, удалить Helix и fresh, выгрузить идентификатор"""
                    def response = httpRequest(url: "https://api.telegram.org/bot${config.products[product].botToken}/sendMessage?chat_id=${config.products[product].chatId}&text=${URLEncoder.encode(messageText, 'UTF-8')}")
                    // Вручную запрашиваем продолжение пайплайна
                    input 'Продолжить выполнение пайплайна?'
                }
            }
        }
        stage("Загрузка расширений и СЛК") {
            steps {
                script {
                    def loadexmes = 'SBORKA/STOMA/loadext.py'
                    def compiledatafile = 'SBORKA/STOMA/compiledatafile.py'
                    def zip = 'SBORKA/STOMA/zip.py'
                    def source_file
                    def template_name
                    if (params.Product.contains('STOMA')) {
                        serie = "4FB1" 
                        // Загрузка расширения журнала записи
                        source_file = "${config.products[product].fbrb}\\Protected\\jurnal.cfe"
                        template_name = "РасширениеЖурналаЗаписи"
                        sh "python -X utf8 ${loadexmes} \"${source_file}\" \"${config.products[product].platformPath}\" \"${config.products[product].baseBuild}\" \"${config.products[product].buildUser}\" \"${template_name}\""
                    }
                    // Загрузка расширения мессенджера
                    source_file = "${config.products[product].fbrb}\\messenger.cfe"
                    template_name = "РасширениеМессенджера"
                    sh "python -X utf8 ${loadexmes} \"${source_file}\" \"${config.products[product].platformPath}\" \"${config.products[product].baseBuild}\" \"${config.products[product].buildUser}\" \"${template_name}\""

                    // Загрузка компоненты СЛК в макет 'КомпонентаСЛК'"
                    source_file = "${config.products[product].fbrb}\\licenceaddin-${params.slkversion}-template.zip"
                    template_name = "КомпонентаСЛК"
                    sh "python -X utf8 ${loadexmes} \"${source_file}\" \"${config.products[product].platformPath}\" \"${config.products[product].baseBuild}\" \"${config.products[product].buildUser}\" \"${template_name}\""

                    // Создание файла .datafile
                    sh "python -X utf8 ${compiledatafile} \"${config.products[product].fbrb}\" \"${config.products[product].serie}\""

                    // Загрузка .datafile в макет 'ОбъектыСЛК'
                    source_file = "${config.products[product].fbrb}\\${config.products[product].serie}.datafile"
                    template_name = "ОбъектыСЛК"
                    sh "python -X utf8 ${loadexmes} \"${source_file}\" \"${config.products[product].platformPath}\" \"${config.products[product].baseBuild}\" \"${config.products[product].buildUser}\" \"${template_name}\""

                    //  Создание файла 4FB1.zip
                    sh "python -X utf8 ${zip} \"${config.products[product].fbrb}\" \"${config.products[product].target_path}\" \"${config.products[product].serie}\""
                }
            }
        }
        stage('Основная поставка') {
            steps {
                script {
                    bat """
                    chcp 65001
                    @call ${VRUNNER_PATH} session kill --with-nolock --db ${basenameinf} --db-user "${config.products[product].buildUser}"
                    "${config.products[product].platformPath}" DESIGNER /S"${config.products[product].baseBuild}" /N"${config.products[product].buildUser}" /CreateDistributivePackage"${config.products[product].collectedReleaseP}" -File"${config.products[product].fbrb}\\${config.products[product].edfNamefull}" -PackageFileName setup.zip -Option"Основная поставка"
                    """
                    def unzipping = 'SBORKA/STOMA/unzipping.py'                    // Разархивирование
                    bat "python -X utf8 ${unzipping} ${config.products[product].collectedReleaseP}"
                    def install = 'SBORKA/STOMA/install.py'                        // Установка
                    bat "python -X utf8 ${install} ${config.products[product].collectedReleaseP}"
                }
            }
        }
        stage("Выгрзка файла .cfu") {
            steps {
                script{
                    bat """
                    chcp 65001
                    "${config.products[product].platformPath}" DESIGNER /S"${config.products[product].baseBuild}" /N"${config.products[product].buildUser}" /CreateDistributionFiles -cfufile ${config.products[product].sbor}\\Update\\1Cv8.cfu -f ${config.products[product].oldCF}\\${oldversion_1}.cf
                    """
                }
            }
        }
        stage('Поставка обновления') {
            steps {
                script {
                    bat """
                    chcp 65001
                    "${config.products[product].platformPath}" DESIGNER /S"${config.products[product].baseBuild}" /N"${config.products[product].buildUser}" /CreateDistributivePackage"${config.products[product].collectedReleaseOb}" -File"${config.products[product].fbrb}\\${edfNameobnov}" -PackageFileName update.zip -Option"Поставка обновления"
                    """
                    def unzippingupdate = 'SBORKA/STOMA/unzippingupdate.py'           // Разархивирование
                    bat "python -X utf8 ${unzippingupdate} ${config.products[product].collectedReleaseOb}"
                    def installupdate = 'SBORKA/STOMA/installupdate.py'               // Установка
                    bat "python -X utf8 ${installupdate} ${config.products[product].collectedReleaseOb}"
                }
            }
        }
        stage('Создание архива дистрибутива') {
            steps {
                script {
                    def perenos = 'SBORKA/STOMA/Perenos.py'
                    sh "python -X utf8 ${perenos} \"${newversion_1}\" \"${config.products[product].target_path}\" \"${config.products[product].collectedReleaseP}\" \"${config.products[product].oldCF}\" \"${config.products[product].collectedReleaseOb}\" \"${config.products[product].fbrb}\" \"${config.products[product].ProductName}\" \"${edfNameobnov}\" \"${archiveName}\" \"${namedistr}\""
                    def messagefinish = 'Сборка ${params.Product} успешно завершена.'            // Отправка сообщения в Telegram
                    def response = httpRequest(url: "https://api.telegram.org/bot${botToken}/sendMessage?chat_id=${chatId}&text=${URLEncoder.encode(messagefinish, 'UTF-8')}"
                    )
                }
            }
        }
    }
}
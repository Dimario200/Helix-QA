def config
def product
pipeline {
    agent { label "OneS" }
    parameters {
            string(defaultValue: "4.0.50.1", description: 'Старая версия', name: 'oldversion_1')
            string(defaultValue: "4.0.51.1", description: 'Новая версия', name: 'newversion_1')
            string(defaultValue: "8.3.24.1368", description: 'Версия платформы 1с', name: 'platformversion_1')
            string(defaultValue: "3.0.37.11710", description: 'Версия СЛК', name: 'slkversion')
    }
    environment {
        allureReportUrl = "${env.JENKINS_URL}job/${env.JOB_NAME.replaceAll('/', '/job/')}/${env.BUILD_NUMBER}/allure"
        allureResultsDir = "${env.WORKSPACE.replace('\\', '\\\\')}\\\\results"
        VRUNNER_PATH = 'vrunner'
    }
    stages {
        stage("Инициализация параметров") {
            steps {
                script {
                    config = readYaml file: 'SBORKA/STOMA/config.yaml'
                    if (params.Product.contains('FITNESSCORP')) {
                        product = 'fitnesscorp'
                    } else if (params.Product.contains('STOMA')) {
                        product = 'stoma'
                    } else {
                        error "Неизвестный продукт: ${params.Product}. Ожидается 'FITNESSCORP' или 'STOMA'."
                    }
//                    def messageStart = "Запущен процесс сборки «${params.Product}»"  // Отпарвка сообщение в телеграмм о запуске сборки 
//                    def response = httpRequest(url: "https://api.telegram.org/bot${env.botToken}/sendMessage?chat_id=${env.chatId}&text=${URLEncoder.encode(messageStart, 'UTF-8')}")
                }
            }
        }

        // stage('Обновление документации') {
        //     steps {
        //         script {
        //             def scriptPath = 'SBORKA/records/delete_folders_and_files.py'
        //             def scriptPath1 = 'SBORKA/records/update_files_and_contents.py'
        //             def scriptPath2 = 'SBORKA/records/process_files.py'
        //             sh "python -X utf8 ${scriptPath} \"${config.products[product].target_path}\""
        //             sh "python -X utf8 ${scriptPath1} \"${config.products[product].source_directory}\" \"${config.products[product].target_path}\" \"${params.oldversion_1}\" \"${params.newversion_1}\" \"${params.platformversion_1}\" \"${params.slkversion}\" \"${config.products[product].sbor}\""
        //             sh "python -X utf8 ${scriptPath2} \"${params.oldversion_1}\" \"${params.newversion_1}\" \"${config.products[product].sample_edf}\" \"${config.products[product].fbrb}\""
        //         }
        //     }
        // }
        // stage("Обновление конфигурации из релизного хранилища") {
        //     steps{
        //         script {
		// 			bat """
		// 			chcp 65001
		// 			@call ${VRUNNER_PATH} session kill --with-nolock --db ${config.products[product].release_server} --db-user ${config.products[product].release_user}
		// 			@call ${VRUNNER_PATH} loadrepo --storage-name ${config.products[product].rel_repository} --storage-user ${config.products[product].repository_user} --ibconnection /Slocalhost/${config.products[product].release_server} --db-user ${config.products[product].release_user}
		// 			@call ${VRUNNER_PATH} updatedb --ibconnection /Slocalhost/${config.products[product].release_server} --db-user ${config.products[product].release_user}
        //             """
        //         }
        //     }
        // }
        // stage("Обновление мессенджера из хранилища") {
        //     steps{  
        //         script {
        //             if (params.Product.contains('FINTESSCORP')) {
        //                 bat """
        //                 chcp 65001
        //                 @call ${VRUNNER_PATH} loadrepo --storage-name http://192.168.2.16/hran1c/repository.1ccr/fitness4_messenger_release --storage-user МихаилБ --extension ${config.products[product].extension_name_mess} --ibconnection /Slocalhost/${config.products[product].release_server} --db-user ${config.products[product].release_user}
        //                 @call ${VRUNNER_PATH} updateext ${config.products[product].extension_name_mess} --ibconnection /Slocalhost/${config.products[product].release_server} --db-user ${config.products[product].release_user}
        //                 """
		// 			}else if (params.Product.contains('PROF')) {

		// 			}else if (params.Product.contains('SPA')) {

		// 			}else if (params.Product.contains('SALON')) {

		// 			}else if (params.Product.contains('STOMA')) {
        //                 bat """
        //                 chcp 65001
        //                 @call ${VRUNNER_PATH} loadrepo --storage-name http://192.168.2.16/hran1c/repository.1ccr/stomatology2_messenger_release --storage-user МихаилБ --extension ${config.products[product].extension_name_mess} --ibconnection /Slocalhost/${config.products[product].release_server} --db-user ${config.products[product].release_user}
        //                 @call ${VRUNNER_PATH} updateext ${config.products[product].extension_name_mess} --ibconnection /Slocalhost/${config.products[product].release_server} --db-user ${config.products[product].release_user}
        //                 """
        //             }
        //         }
        //     }
        // }
        // stage("Обновление журнала записи из хранилища") {
        //     when { expression {params.Product.contains('STOMA') } }
        //     steps{
        //         script {
        //             bat """
        //             chcp 65001
        //             @call ${VRUNNER_PATH} loadrepo --storage-name http://192.168.2.16/hran1c/repository.1ccr/stomatology2_shedule --storage-user МихаилБ --extension ${config.products[product].extension_name_jurnal} --ibconnection /Slocalhost/${config.products[product].release_server} --db-user ${config.products[product].release_user}
        //             @call ${VRUNNER_PATH} updateext ${config.products[product].extension_name_jurnal} --ibconnection /Slocalhost/${config.products[product].release_server} --db-user ${config.products[product].release_user}
        //             """
        //             }
        //         }
        //     }
        // stage("Выгрузка конфигураций и расширений из хранилища") {
        //     steps{
        //         script {
        //             bat """
        //             chcp 65001
        //             @call ${VRUNNER_PATH} unload ${config.products[product].fbrb}\\1Cv8.cf --ibconnection /Slocalhost/${config.products[product].release_server} --db-user ${config.products[product].release_user}
        //             @call ${VRUNNER_PATH} unloadext ${config.products[product].fbrb}\\messenger.cfe ${config.products[product].extension_name_mess} --ibconnection /Slocalhost/${config.products[product].release_server} --db-user ${config.products[product].release_user}
        //             """
        //             if (params.Product.contains('STOMA')) {
        //                 bat """
        //                 chcp 65001
        //                 @call ${VRUNNER_PATH} unloadext ${config.products[product].fbrb}\\jurnal.cfe ${config.products[product].extension_name_jurnal} --ibconnection /Slocalhost/${config.products[product].release_server} --db-user ${config.products[product].release_user}
        //                 """
		// 			}

        //         }
        //     }
        // }
        // stage('Шифрование расширения') {
        //     when { expression {params.Product.contains('STOMA') } }
        //     steps {
        //         script{
        //             bat """
        //             start ${config.products[product].netlenka}\\Netlenka1C.exe --mode=prof --source ${config.products[product].fbrb}\\jurnal.cfe --createpdb
        //             exit
        //             """
        //         }
        //     }
        // }
        // stage('Загрузка .cf в базу для сборки релиза') {
        //     steps {
        //         script {
        //             bat """
        //             chcp 65001
        //             @call ${VRUNNER_PATH} load --src ${config.products[product].fbrb}\\1Cv8.cf --ibconnection /S${config.products[product].base_build} --db-user "${config.products[product].build_user}"
        //             @call ${VRUNNER_PATH} updatedb --ibconnection /S${config.products[product].base_build} --db-user "${config.products[product].build_user}"
        //             """
        //         }
        //     }
        // }
        // stage("Обновление базы в режиме 1С:Предприятие") {
        //     steps {
        //         script{
        //             bat """
        //             chcp 65001
        //             @call ${VRUNNER_PATH}  run --command ЗавершитьРаботуСистемы; --ibconnection /S${config.products[product].base_build} --db-user "${config.products[product].build_user}" --execute "${env.epfvrunner}\\ЗакрытьПредприятие.epf"
        //             """
        //         }
        //     }
        // }
       stage('Pause and Notify Telegram') {
            steps {
                script {
                    def jobPath = "${JOB_NAME}".replace('/', '/job/') + "/${BUILD_NUMBER}"
                    echo "Generated Job Path: ${jobPath}"

                    def messageText = "Сборка приостановлена. Необходимо создать внешнюю обработку, удалить Helix и fresh, выгрузить идентификатор"
                    def keyboard = '''
                    {
                        "inline_keyboard": [
                            [ {"text": "Proceed", "callback_data": "proceed_''' + jobPath + '''"}, {"text": "Abort", "callback_data": "abort_''' + jobPath + '''"} ]
                        ]
                    }
                    '''

                    def response = httpRequest(
                        url: "https://api.telegram.org/bot${env.botToken}/sendMessage",
                        httpMode: 'POST',
                        requestBody: """{
                            "chat_id": "${env.chatId}",
                            "text": "${URLEncoder.encode(messageText, 'UTF-8')}",
                            "reply_markup": ${keyboard}
                        }""",
                        contentType: 'APPLICATION_JSON'
                    )

                    input 'Ожидание действия от Telegram...'
                }
            }
        }
        stage('Continue Pipeline') {
            steps {
                echo "Продолжаем выполнение пайплайна..."
            }
        }
        stage("Загрузка расширений и СЛК") {
            steps {
                script {
                    def loadexmes = 'SBORKA/STOMA/loadext.py'
                    def compiledatafile = 'SBORKA/STOMA/compiledatafile.py'
                    def zip = 'SBORKA/STOMA/zip.py'
                    def source_file
                    def template_name
                    if (params.Product.contains('STOMA')) {
                        // Загрузка расширения журнала записи
                        source_file = "${config.products[product].fbrb}\\Protected\\jurnal.cfe"
                        template_name = "РасширениеЖурналаЗаписи"
                        sh "python -X utf8 ${loadexmes} \"${source_file}\" \"${env.platformPath}\" \"${config.products[product].base_build}\" \"${config.products[product].build_user}\" \"${template_name}\""
                    }
                    // Загрузка расширения мессенджера
                    source_file = "${config.products[product].fbrb}\\messenger.cfe"
                    template_name = "РасширениеМессенджера"
                    sh "python -X utf8 ${loadexmes} \"${source_file}\" \"${env.platformPath}\" \"${config.products[product].base_build}\" \"${config.products[product].build_user}\" \"${template_name}\""

                    // Загрузка компоненты СЛК в макет 'КомпонентаСЛК'"
                    source_file = "${config.products[product].fbrb}\\licenceaddin-${params.slkversion}-template.zip"
                    template_name = "КомпонентаСЛК"
                    sh "python -X utf8 ${loadexmes} \"${source_file}\" \"${env.platformPath}\" \"${config.products[product].base_build}\" \"${config.products[product].build_user}\" \"${template_name}\""

                    // Создание файла .datafile
                    sh "python -X utf8 ${compiledatafile} \"${config.products[product].fbrb}\" \"${config.products[product].serie}\""

                    // Загрузка .datafile в макет 'ОбъектыСЛК'
                    source_file = "${config.products[product].fbrb}\\${config.products[product].serie}.datafile"
                    template_name = "ОбъектыСЛК"
                    sh "python -X utf8 ${loadexmes} \"${source_file}\" \"${env.platformPath}\" \"${config.products[product].base_build}\" \"${config.products[product].build_user}\" \"${template_name}\""

                    //  Создание файла 4FB1.zip
                    sh "python -X utf8 ${zip} \"${config.products[product].fbrb}\" \"${config.products[product].target_path}\" \"${config.products[product].serie}\""
                }
            }
        }
        stage('Основная поставка') {
            steps {
                script {
                    bat """
                    chcp 65001
                    @call ${VRUNNER_PATH} session kill --with-nolock --db ${config.products[product].base_name_inf} --db-user "${config.products[product].build_user}"
                    "${env.platformPath}" DESIGNER /S"${config.products[product].base_build}" /N"${config.products[product].build_user}" /CreateDistributivePackage"${config.products[product].collected_release_p}" -File"${config.products[product].fbrb}\\${config.products[product].edf_name_full}" -PackageFileName setup.zip -Option"Основная поставка"
                    """
                    def unzipping = 'SBORKA/STOMA/unzipping.py'                    // Разархивирование
                    bat "python -X utf8 ${unzipping} ${config.products[product].collected_release_p}"
                    def install = 'SBORKA/STOMA/install.py'                        // Установка
                    bat "python -X utf8 ${install} ${config.products[product].collected_release_p}"
                }
            }
        }
        stage("Выгрзка файла .cfu") {
            steps {
                script{
                    bat """
                    chcp 65001
                    "${env.platformPath}" DESIGNER /S"${config.products[product].base_build}" /N"${config.products[product].build_user}" /CreateDistributionFiles -cfufile ${config.products[product].sbor}\\Update\\1Cv8.cfu -f ${config.products[product].old_cf}\\${oldversion_1}.cf
                    """
                }
            }
        }
        stage('Поставка обновления') {
            steps {
                script {
                    bat """
                    chcp 65001
                    "${env.platformPath}" DESIGNER /S"${config.products[product].base_build}" /N"${config.products[product].build_user}" /CreateDistributivePackage"${config.products[product].collected_release_ob}" -File"${config.products[product].fbrb}\\${config.products[product].edf_name_obnov}" -PackageFileName update.zip -Option"Поставка обновления"
                    """
                    def unzippingupdate = 'SBORKA/STOMA/unzippingupdate.py'           // Разархивирование
                    bat "python -X utf8 ${unzippingupdate} ${config.products[product].collected_release_ob}"
                    def installupdate = 'SBORKA/STOMA/installupdate.py'               // Установка
                    bat "python -X utf8 ${installupdate} ${config.products[product].collected_release_ob}"
                }
            }
        }
        stage('Создание архива дистрибутива') {
            steps {
                script {
                    def perenos = 'SBORKA/STOMA/Perenos.py'
                    sh "python -X utf8 ${perenos} \"${newversion_1}\" \"${config.products[product].target_path}\" \"${config.products[product].collected_release_p}\" \"${config.products[product].old_cf}\" \"${config.products[product].collected_release_ob}\" \"${config.products[product].fbrb}\" \"${config.products[product].product_name}\" \"${config.products[product].edf_name_obnov}\" \"${config.products[product].archive_name}\" \"${config.products[product].name_distr}\""
                    def messagefinish = "Сборка «${params.Product}» успешно завершена."            // Отправка сообщения в Telegram
                    def response = httpRequest(url: "https://api.telegram.org/bot${env.botToken}/sendMessage?chat_id=${env.chatId}&text=${URLEncoder.encode(messagefinish, 'UTF-8')}"
                    )
                }
            }
        }
    }
}
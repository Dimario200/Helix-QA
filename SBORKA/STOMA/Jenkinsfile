pipeline {
    agent { label "OneS" }
    parameters {
            string(defaultValue: "4.0.50.1", description: 'Старая версия', name: 'oldversion_1')
            string(defaultValue: "4.0.51.1", description: 'Новая версия', name: 'newversion_1')
            string(defaultValue: "8.3.24.1368", description: 'Версия платформы 1с', name: 'platformversion_1')
            string(defaultValue: "3.0.37.11710", description: 'Версия СЛК', name: 'slkversion')
    }
    environment {
        allureReportUrl = "${env.JENKINS_URL}job/${env.JOB_NAME.replaceAll('/', '/job/')}/${env.BUILD_NUMBER}/allure"
        allureResultsDir = "${env.WORKSPACE.replace('\\', '\\\\')}\\\\results"
        VRUNNER_PATH = 'vrunner'
    }
    stages {
      stage("Инициализация параметров") {
        steps {
            script {
                def config = readYaml file: 'config.yaml'
                def product
                
                if (params.Product.contains('FITNESSCORP')) {
                    product = 'fitnesscorp'
                } else if (params.Product.contains('STOMA')) {
                    product = 'stoma'
                } else {
                    error "Неизвестный продукт: ${params.Product}. Ожидается 'FITNESSCORP' или 'STOMA'."
                }
                
                // Примеры использования переменных из нужного раздела YAML
                //sh "python -X utf8 ${env.scriptPath} \"${config.products[product].target_path.replace('${params.Product}', params.Product)}\""
                println "Путь к полной поставке: ${config.common.collected_release_p.replace('${params.Product}', params.Product)}"
                println "Имя продукта: ${config.products[product].product_name}"
                println "Репозиторий: ${config.products[product].rel_repository}"
            }
        }
    }

        // stage('Обновление документации') {
        //     steps {
        //         script {
        //             def scriptPath = 'SBORKA/records/delete_folders_and_files.py'
        //             def scriptPath1 = 'SBORKA/records/update_files_and_contents.py'
        //             def scriptPath2 = 'SBORKA/records/process_files.py'
        //             sh "python -X utf8 ${scriptPath} \"${env.target_path}\""
        //             sh "python -X utf8 ${scriptPath1} \"${env.sourceDirectory}\" \"${env.target_path}\" \"${params.oldversion_1}\" \"${params.newversion_1}\" \"${params.platformversion_1}\" \"${params.slkversion}\" \"${env.sbor}\""
        //             sh "python -X utf8 ${scriptPath2} \"${params.oldversion_1}\" \"${params.newversion_1}\" \"${env.sampleEdf}\" \"${env.fbrb}\""
        //         }
        //     }
        // }
        // stage("Обновление конфигурации из релизного хранилища") {
        //     steps{
        //         script {
		// 			bat """
		// 			chcp 65001
		// 			@call ${VRUNNER_PATH} session kill --with-nolock --db ${env.releaseServer} --db-user ${env.releaseUser}
		// 			@call ${VRUNNER_PATH} loadrepo --storage-name ${env.relrepositoy} --storage-user ${env.varepositoryUser} --ibconnection /Slocalhost/${env.releaseServer} --db-user ${env.releaseUser}
		// 			@call ${VRUNNER_PATH} updatedb --ibconnection /Slocalhost/${env.releaseServer} --db-user ${env.releaseUser}
        //             """
        //         }
        //     }
        // }
        // stage("Обновление мессенджера из хранилища") {
        //     steps{  
        //         script {
        //             if (params.Product.contains('FINTESSCORP')) {
        //                 bat """
        //                 chcp 65001
        //                 @call ${VRUNNER_PATH} loadrepo --storage-name http://192.168.2.16/hran1c/repository.1ccr/fitness4_messenger_release --storage-user МихаилБ --extension ${env.extensionNamemess} --ibconnection /Slocalhost/${env.releaseServer} --db-user ${env.releaseUser}
        //                 @call ${VRUNNER_PATH} updateext ${env.extensionNamemess} --ibconnection /Slocalhost/${env.releaseServer} --db-user ${env.releaseUser}
        //                 """
		// 			}else if (params.Product.contains('FITNESS')) {
        //                 //
		// 			}else if (params.Product.contains('SPASALON')) {
        //                 //
		// 			}else if (params.Product.contains('SALON')) {
        //                 //
		// 			}else if (params.Product.contains('STOMA')) {
        //                 bat """
        //                 chcp 65001
        //                 @call ${VRUNNER_PATH} loadrepo --storage-name http://192.168.2.16/hran1c/repository.1ccr/stomatology2_messenger_release --storage-user МихаилБ --extension ${env.extensionNamemess} --ibconnection /Slocalhost/${env.releaseServer} --db-user ${env.releaseUser}
        //                 @call ${VRUNNER_PATH} updateext ${env.extensionNamemess} --ibconnection /Slocalhost/${env.releaseServer} --db-user ${env.releaseUser}
        //                 """
        //             }
        //         }
        //     }
        // }
        // stage("Обновление журнала записи из хранилища") {
        //     when { expression {params.Product.contains('STOMA') } }
        //     steps{
        //         script {
        //             bat """
        //             chcp 65001
        //             @call ${VRUNNER_PATH} loadrepo --storage-name http://192.168.2.16/hran1c/repository.1ccr/stomatology2_shedule --storage-user МихаилБ --extension ${env.extensionNamejurnal} --ibconnection /Slocalhost/${env.releaseServer} --db-user ${env.releaseUser}
        //             @call ${VRUNNER_PATH} updateext ${env.extensionNamejurnal} --ibconnection /Slocalhost/${env.releaseServer} --db-user ${env.releaseUser}
        //             """
        //             }
        //         }
        //     }
        // stage("Выгрузка конфигураций и расширений из хранилища") {
        //     steps{
        //         script {
        //             bat """
        //             chcp 65001
        //             @call ${VRUNNER_PATH} unload ${env.fbrb}\\1Cv8.cf --ibconnection /Slocalhost/${env.releaseServer} --db-user ${env.releaseUser}
        //             @call ${VRUNNER_PATH} unloadext ${env.fbrb}\\messenger.cfe ${env.extensionNamemess} --ibconnection /Slocalhost/${env.releaseServer} --db-user ${env.releaseUser}
        //             """
        //             if (params.Product.contains('STOMA')) {
        //                 bat """
        //                 chcp 65001
        //                 @call ${VRUNNER_PATH} unloadext ${env.fbrb}\\jurnal.cfe ${env.extensionNamejurnal} --ibconnection /Slocalhost/${env.releaseServer} --db-user ${env.releaseUser}
        //                 """
		// 			}

        //         }
        //     }
        // }
        // stage('Шифрование расширения') {
        //     when { expression {params.Product.contains('STOMA') } }
        //     steps {
        //         script{
        //             bat """
        //             start ${env.netlenka}\\Netlenka1C.exe --mode=prof --source ${env.fbrb}\\jurnal.cfe --createpdb
        //             exit
        //             """
        //         }
        //     }
        // }
        // stage('Загрузка .cf в базу для сборки релиза') {
        //     steps {
        //         script {
        //             bat """
        //             chcp 65001
        //             @call ${VRUNNER_PATH} load --src ${env.fbrb}\\1Cv8.cf --ibconnection /S${env.baseBuild} --db-user "${env.buildUser}"
        //             @call ${VRUNNER_PATH} updatedb --ibconnection /S${env.baseBuild} --db-user "${env.buildUser}"
        //             """
        //         }
        //     }
        // }
        // stage("Обновление базы в режиме 1С:Предприятие") {
        //     steps {
        //         script{
        //             bat """
        //             chcp 65001
        //             @call ${VRUNNER_PATH}  run --command ЗавершитьРаботуСистемы; --ibconnection /S${env.baseBuild} --db-user "${env.buildUser}" --execute "${env.epfvrunner}\\ЗакрытьПредприятие.epf"
        //             """
        //         }
        //     }
        // }
        // stage('Пауза') {
        //     steps {
        //        script{
        //             def messageText = """Сборка приостановлена. Необходимо создать внешнюю обработку, удалить Helix и fresh, выгрузить идентификатор"""
        //             def response = httpRequest(url: "https://api.telegram.org/bot${env.botToken}/sendMessage?chat_id=${env.chatId}&text=${URLEncoder.encode(messageText, 'UTF-8')}")
        //             // Вручную запрашиваем продолжение пайплайна
        //             input 'Продолжить выполнение пайплайна?'
        //         }
        //     }
        // }
        // stage("Загрузка расширений и СЛК") {
        //     steps {
        //         script {
        //             def loadexmes = 'SBORKA/STOMA/loadext.py'
        //             def compiledatafile = 'SBORKA/STOMA/compiledatafile.py'
        //             def zip = 'SBORKA/STOMA/zip.py'
        //             def source_file
        //             def template_name
        //             if (params.Product.contains('STOMA')) {
        //                 serie = "4FB1" 
        //                 // Загрузка расширения журнала записи
        //                 source_file = "${env.fbrb}\\Protected\\jurnal.cfe"
        //                 template_name = "РасширениеЖурналаЗаписи"
        //                 sh "python -X utf8 ${loadexmes} \"${source_file}\" \"${env.platformPath}\" \"${env.baseBuild}\" \"${env.buildUser}\" \"${template_name}\""
        //             }
        //             // Загрузка расширения мессенджера
        //             source_file = "${env.fbrb}\\messenger.cfe"
        //             template_name = "РасширениеМессенджера"
        //             sh "python -X utf8 ${loadexmes} \"${source_file}\" \"${env.platformPath}\" \"${env.baseBuild}\" \"${env.buildUser}\" \"${template_name}\""

        //             // Загрузка компоненты СЛК в макет 'КомпонентаСЛК'"
        //             source_file = "${env.fbrb}\\licenceaddin-${params.slkversion}-template.zip"
        //             template_name = "КомпонентаСЛК"
        //             sh "python -X utf8 ${loadexmes} \"${source_file}\" \"${env.platformPath}\" \"${env.baseBuild}\" \"${env.buildUser}\" \"${template_name}\""

        //             // Создание файла .datafile
        //             sh "python -X utf8 ${compiledatafile} \"${env.fbrb}\" \"${env.serie}\""

        //             // Загрузка .datafile в макет 'ОбъектыСЛК'
        //             source_file = "${env.fbrb}\\${env.serie}.datafile"
        //             template_name = "ОбъектыСЛК"
        //             sh "python -X utf8 ${loadexmes} \"${source_file}\" \"${env.platformPath}\" \"${env.baseBuild}\" \"${env.buildUser}\" \"${template_name}\""

        //             //  Создание файла 4FB1.zip
        //             sh "python -X utf8 ${zip} \"${env.fbrb}\" \"${env.target_path}\" \"${env.serie}\""
        //         }
        //     }
        // }
        // stage('Основная поставка') {
        //     steps {
        //         script {
        //             bat """
        //             chcp 65001
        //             @call ${VRUNNER_PATH} session kill --with-nolock --db ${basenameinf} --db-user "${env.buildUser}"
        //             "${env.platformPath}" DESIGNER /S"${env.baseBuild}" /N"${env.buildUser}" /CreateDistributivePackage"${env.collectedReleaseP}" -File"${env.fbrb}\\${env.edfNamefull}" -PackageFileName setup.zip -Option"Основная поставка"
        //             """
        //             def unzipping = 'SBORKA/STOMA/unzipping.py'                    // Разархивирование
        //             bat "python -X utf8 ${unzipping} ${env.collectedReleaseP}"
        //             def install = 'SBORKA/STOMA/install.py'                        // Установка
        //             bat "python -X utf8 ${install} ${env.collectedReleaseP}"
        //         }
        //     }
        // }
        // stage("Выгрзка файла .cfu") {
        //     steps {
        //         script{
        //             bat """
        //             chcp 65001
        //             "${env.platformPath}" DESIGNER /S"${env.baseBuild}" /N"${env.buildUser}" /CreateDistributionFiles -cfufile ${env.sbor}\\Update\\1Cv8.cfu -f ${env.oldCF}\\${oldversion_1}.cf
        //             """
        //         }
        //     }
        // }
        // stage('Поставка обновления') {
        //     steps {
        //         script {
        //             bat """
        //             chcp 65001
        //             "${env.platformPath}" DESIGNER /S"${env.baseBuild}" /N"${env.buildUser}" /CreateDistributivePackage"${env.collectedReleaseOb}" -File"${env.fbrb}\\${edfNameobnov}" -PackageFileName update.zip -Option"Поставка обновления"
        //             """
        //             def unzippingupdate = 'SBORKA/STOMA/unzippingupdate.py'           // Разархивирование
        //             bat "python -X utf8 ${unzippingupdate} ${env.collectedReleaseOb}"
        //             def installupdate = 'SBORKA/STOMA/installupdate.py'               // Установка
        //             bat "python -X utf8 ${installupdate} ${env.collectedReleaseOb}"
        //         }
        //     }
        // }
        // stage('Создание архива дистрибутива') {
        //     steps {
        //         script {
        //             def perenos = 'SBORKA/STOMA/Perenos.py'
        //             sh "python -X utf8 ${perenos} \"${newversion_1}\" \"${env.target_path}\" \"${env.collectedReleaseP}\" \"${env.oldCF}\" \"${env.collectedReleaseOb}\" \"${env.fbrb}\" \"${env.ProductName}\" \"${edfNameobnov}\" \"${archiveName}\" \"${namedistr}\""
        //             def messagefinish = 'Сборка ${params.Product} успешно завершена.'            // Отправка сообщения в Telegram
        //             def response = httpRequest(url: "https://api.telegram.org/bot${botToken}/sendMessage?chat_id=${chatId}&text=${URLEncoder.encode(messagefinish, 'UTF-8')}"
        //             )
        //         }
        //     }
        //}
    }
}
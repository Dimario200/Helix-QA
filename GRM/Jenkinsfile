pipeline {
    agent any
    stages {
        stage('Get Presigned URL from 1C API') {
            steps {
                script {
                    def applicationId = ""
					if (params.nameProduct.contains('finessCorp')) {
					applicationId = "ff8080818114016801822509d75d0029"
                    } else if (params.nameProduct.contains('SpaSalon3')) {
					applicationId = "ff808081811401680182257b91c0002d"
                    } else if (params.nameProduct.contains('salon30')) {
					applicationId = "ff8080817ccbb453017d0ee91ffe000d"
                    }
                    def params = [
                        "applicationId": "${applicationId}",
                        "name": "${params.version}",
                        "filename": "1Cv8.dt",
                        "releaseDate": new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS").format(new Date())
                    ]
                    def jsonBody = groovy.json.JsonOutput.toJson(params)
                    echo "Request Body: ${jsonBody}"
                    try {
                        def response = httpRequest(
                            url: 'https://1capp.link.1c.ru/1capp-ecw-admin/hs/ECWConfPublication/v1/getPresignedUrl',
                            httpMode: 'GET', // Используем POST для передачи тела
                            contentType: 'APPLICATION_JSON',
                            requestBody: jsonBody,
                            customHeaders: [[name: 'Authorization', value: 'Basic bGFicG86ZEU5c2V6eWc=']],
                            validResponseCodes: '200:299',
                            ignoreSslErrors: true
                        )
                        echo "Response Status: ${response.status}"
                        echo "Response Content: ${response.content}"

                       
					    def jsonSlurper = new groovy.json.JsonSlurper()
                        def responseJson = jsonSlurper.parseText(response.content)
                        def uploadUrl = responseJson.uploadUrl
                        echo "Extracted uploadUrl: ${uploadUrl}"
                        env.UPLOAD_URL = uploadUrl
                        echo "Saved uploadUrl to env variable: ${env.UPLOAD_URL}"

                    } catch (Exception e) {
                        echo "Request failed with error: ${e.getMessage()}"
                        error "Failed to get presigned URL: ${e.getMessage()}"
                    }
                }
            }
        }
		stage('Upload File to Presigned URL') {
            steps {
                script {
					def uploadUrl = env.UPLOAD_URL
                    def filePath = "D:\\dt\\1Cv8.dt"
                    def fileContent = new File(filePath).bytes
                    echo "Uploading file from: ${filePath}"
                    echo "Target URL: ${uploadUrl}"
                    try {
                        def response = httpRequest(
                            url: uploadUrl,
                            httpMode: 'PUT',
                            contentType: 'APPLICATION_OCTET_STREAM', // application/octet-stream для бинарных данных
                            requestBody: fileContent, // Передаем содержимое файла напрямую
                            validResponseCodes: '200:299'
                        )
                        echo "Upload Response Status: ${response.status}"
                        echo "Upload Response Content: ${response.content}"
                    } catch (Exception e) {
                        echo "Upload failed with error: ${e.getMessage()}"
                        error "Failed to upload file: ${e.getMessage()}"
                    }
                }
            }
        }
    }
}
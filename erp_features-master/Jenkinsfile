pipeline {
    agent { label params.jenkinsAgent ?: 'OneS' }
    
    parameters {
        string(name: 'jenkinsAgent', defaultValue: 'OneS', description: 'Нода Jenkins, на которой запускать пайплайн')
        string(name: 'server1c', defaultValue: 'localhost', description: 'Имя сервера 1С')
        string(name: 'server1cPort', defaultValue: '1540', description: 'Порт рабочего сервера 1С')
        string(name: 'agent1cPort', defaultValue: '1541', description: 'Порт агента кластера 1С')
        string(name: 'platform1c', defaultValue: '', description: 'Версия платформы 1С (например, 8.3.12.1685)')
        string(name: 'serverSql', defaultValue: 'localhost', description: 'Имя сервера PostgreSQL')
        string(name: 'admin1cUser', defaultValue: '', description: 'Имя администратора 1С')
        string(name: 'admin1cPwd', defaultValue: '', description: 'Пароль администратора 1С')
        string(name: 'sqlUser', defaultValue: 'postgres', description: 'Имя администратора PostgreSQL')
        string(name: 'sqlPwd', defaultValue: 'postgres', description: 'Пароль администратора PostgreSQL')
        string(name: 'templatebases', defaultValue: 'work_erp,work_upp', description: 'Список эталонных баз через запятую')
        string(name: 'storages1cPath', defaultValue: '', description: 'Пути к хранилищам 1С через запятую')
        string(name: 'storageUser', defaultValue: '', description: 'Администратор хранилищ 1С')
        string(name: 'storagePwd', defaultValue: '', description: 'Пароль администратора хранилищ 1С')
    }

    options {
        timeout(time: 8, unit: 'HOURS')
        buildDiscarder(logRotator(numToKeepStr: '10'))
    }

    environment {
        WORKSPACE = "${env.WORKSPACE}"
        BUILD_DIR = "${WORKSPACE}/build"
    }

    stages {
        stage('Подготовка') {
            steps {
                script {
                    // // Преобразование строк в списки
                    // env.TEMPLATE_BASES_LIST = params.templatebases.toLowerCase().split(',').collect { it.trim() }
                    // env.STORAGES_LIST = params.storages1cPath ? params.storages1cPath.toLowerCase().split(',').collect { it.trim() } : []
                    
                    // // Проверка соответствия количества баз и хранилищ
                    // if (env.STORAGES_LIST.size() > 0 && env.STORAGES_LIST.size() != env.TEMPLATE_BASES_LIST.size()) {
                    //     error "Количество хранилищ (${env.STORAGES_LIST.size()}) не соответствует количеству баз (${env.TEMPLATE_BASES_LIST.size()})"
                    // }

                    // Установка значений по умолчанию
                    env.SERVER_1C = params.server1c ?: 'localhost'
                    env.SERVER_SQL = params.serverSql ?: 'localhost'
                    env.SERVER_1C_PORT = params.server1cPort ?: '1540'
                    env.AGENT_1C_PORT = params.agent1cPort ?: '1541'
                    env.SQL_USER = params.sqlUser ?: 'postgres'

                    // Создание директории build
                    dir('build') {
                        writeFile file: 'dummy', text: ''
                    }
                }
            }
        }

        stage('Обработка баз') {
            parallel {
                // Динамическое создание задач для каждой базы
                // Используем script для генерации этапов
                stage('Обработка баз') {
                    steps {
                        script {
                            def tasks = [:]
                            env.TEMPLATE_BASES_LIST.eachWithIndex { templateDb, i ->
                                def testbase = "test_${templateDb}"
                                def backupPath = "${env.BUILD_DIR}/temp_${templateDb}_${new Date().format('yyyyMMdd_HHmmss')}"
                                def storagePath = env.STORAGES_LIST ? env.STORAGES_LIST[i] : ''
                                def connString = "/S${env.SERVER_1C}:${env.SERVER_1C_PORT}/${testbase}"

                                // Задача удаления тестовой базы
                                tasks["drop_${testbase}"] = {
                                    stage("Удаление ${testbase}") {
                                        bat """
                                            cd /d ${env.WORKSPACE}
                                            drop_db.bat ${env.SERVER_1C} ${env.AGENT_1C_PORT} ${env.SERVER_SQL} ${testbase} "${params.admin1cUser}" "${params.admin1cPwd}" "${env.SQL_USER}" "${params.sqlPwd}" true
                                        """
                                    }
                                }

                                // Задача создания бэкапа эталонной базы
                                tasks["backup_${templateDb}"] = {
                                    stage("Бэкап ${templateDb}") {
                                        bat """
                                            set PGPASSWORD=${params.sqlPwd}
                                            pg_dump -h ${env.SERVER_SQL} -U ${env.SQL_USER} -F c -f "${backupPath}.backup" ${templateDb}
                                            set PGPASSWORD=
                                        """
                                    }
                                }

                                // Задача восстановления тестовой базы
                                tasks["restore_${testbase}"] = {
                                    stage("Восстановление ${testbase}") {
                                        bat """
                                            set PGPASSWORD=${params.sqlPwd}
                                            psql -h ${env.SERVER_SQL} -U ${env.SQL_USER} -d postgres -c "CREATE DATABASE \\"${testbase}\\""
                                            pg_restore -h ${env.SERVER_SQL} -U ${env.SQL_USER} -d ${testbase} --no-owner --no-privileges "${backupPath}.backup"
                                            set PGPASSWORD=
                                        """
                                    }
                                }

                                // Задача создания тестовой базы в кластере 1С
                                tasks["create_${testbase}"] = {
                                    stage("Создание базы ${testbase} в 1С") {
                                        bat """
                                            "C:\\Program Files\\1cv8\\${params.platform1c ?: 'common'}\\1cv8.exe" CREATEINFOBASE Srvr=${env.SERVER_1C}:${env.AGENT_1C_PORT};Ref=${testbase};DBMS=PostgreSQL;DBSrvr=${env.SERVER_SQL};DB=${testbase};DBUID=${env.SQL_USER};DBPwd=${params.sqlPwd}
                                        """
                                    }
                                }

                                // Задача обновления из хранилища
                                tasks["update_${testbase}"] = {
                                    stage("Обновление ${testbase} из хранилища") {
                                        if (storagePath) {
                                            bat """
                                                runner loadrepo --storage-name "${storagePath}" --storage-user "${params.storageUser}" --storage-pwd "${params.storagePwd}" --ibconnection "${connString}" --db-user "${params.admin1cUser}" --db-pwd "${params.admin1cPwd}" ${params.platform1c ? "--v8version ${params.platform1c}" : ""}
                                                runner updatedb --ibconnection "${connString}" --db-user "${params.admin1cUser}" --db-pwd "${params.admin1cPwd}" ${params.platform1c ? "--v8version ${params.platform1c}" : ""}
                                            """
                                        } else {
                                            echo "Хранилище для ${testbase} не указано, обновление пропущено"
                                        }
                                    }
                                }

                                // Задача выполнения обработки 1С
                                tasks["handlers_${testbase}"] = {
                                    stage("Обработка 1С для ${testbase}") {
                                        bat """
                                            "C:\\Program Files\\1cv8\\${params.platform1c ?: 'common'}\\1cv8.exe" ENTERPRISE /S${env.SERVER_1C}:${env.SERVER_1C_PORT}/${testbase} /N"${params.admin1cUser}" /P"${params.admin1cPwd}" /Execute"${env.WORKSPACE}\\tools\\unlockBase.epf"
                                        """
                                    }
                                }
                            }
                            parallel tasks
                        }
                    }
                }
            }
        }

        stage('Тестирование ADD') {
            when { expression { env.TEMPLATE_BASES_LIST?.size() > 0 } }
            steps {
                script {
                    def testbase = "test_${env.TEMPLATE_BASES_LIST[-1]}" // Последняя база
                    def connString = "/S${env.SERVER_1C}:${env.SERVER_1C_PORT}/${testbase}"
                    def platform1cLine = params.platform1c ? "--v8version ${params.platform1c}" : ""
                    def admin1cUsrLine = params.admin1cUser ? "--db-user ${params.admin1cUser}" : ""
                    def admin1cPwdLine = params.admin1cPwd ? "--db-pwd ${params.admin1cPwd}" : ""

                    def returnCode = bat(script: """
                        runner vanessa --settings tools/vrunner.json ${platform1cLine} --ibconnection "${connString}" ${admin1cUsrLine} ${admin1cPwdLine} --pathvanessa tools/add/bddRunner.epf
                    """, returnStatus: true)

                    if (returnCode != 0) {
                        error "Ошибка при запуске ADD на сервере ${env.SERVER_1C} и базе ${testbase}"
                    }
                }
            }
        }
    }

    post {
        always {
            script {
                if (currentBuild.result != 'ABORTED') {
                    dir('build/out/allure') {
                        writeFile file: 'environment.properties', text: "Build=${env.BUILD_URL}"
                    }
                    allure includeProperties: false, jdk: '', results: [[path: 'build/out/allure']]
                }
            }
        }
    }
}
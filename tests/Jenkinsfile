pipeline {
    agent {
        label "OneS"
    }

    environment {
        allureResultsDir = "${env.WORKSPACE.replace('\\', '\\\\')}\\\\results"
        workSpaceDir = "${env.WORKSPACE.replace('\\', '\\\\')}"
        allureReportUrl = "${env.JENKINS_URL}job/${env.JOB_NAME.replaceAll('/', '/job/')}/${env.BUILD_NUMBER}/allure"
		VRUNNER_PATH = 'vrunner'
		vaParamsjson = 'tests/tools/VAParams.json'  
    }
    stages {
        stage('Обновление информационной базы из релизного хранилища') {
            steps {
                script {
					bat """
					chcp 65001
					@call ${VRUNNER_PATH} session kill --with-nolock --db ${params.dbName} --db-user Админ"
					@call ${VRUNNER_PATH} loadrepo --storage-name ${params.repository} --storage-user ${env.VATest} --ibconnection /Slocalhost/${params.dbName} --db-user Админ"
					@call ${VRUNNER_PATH} updatedb --ibconnection /Slocalhost/${params.dbName} --db-user Админ"
                    """
//                    def messagetestStart = "Автотестирование ${JOB_NAME} сборка #${BUILD_NUMBER} запущено."
//                    httpRequest(url: "https://api.telegram.org/bot${env.botToken}/sendMessage?chat_id=${env.chatId}&text=${URLEncoder.encode(messagetestStart, 'UTF-8')}")
                }
            }
        }
		stage("Инициализация параметров") {
            steps {
                script {
					// Читаем исходный файл
					def configJson = readFile(file: vaParamsjson)
					echo "Исходный configJson прочитан из ${vaParamsjson}:"
					echo "${configJson}"
					
					// Сохраняем промежуточные результаты
					def updatedConfigJson = configJson
					echo "Начинаем замену placeholder'ов:"
					
					updatedConfigJson = updatedConfigJson
						.replace('"TestPathPlaceholder"', "\"${params.TestPathPlaceholder}\"")
					echo "Заменен 'TestPathPlaceholder' на '${params.TestPathPlaceholder}'"
					
					updatedConfigJson = updatedConfigJson
						.replace('"workSpaceDir"', "\"${workSpaceDir}\"")
					echo "Заменен 'workSpaceDir' на '${workSpaceDir}'"
					
					updatedConfigJson = updatedConfigJson
						.replace('"nameProduct"', "\"${params.nameProduct}\"")
					echo "Заменен 'nameProduct' на '${params.nameProduct}'"
					
					updatedConfigJson = updatedConfigJson
						.replace('"allureResultsDir"', "\"${env.nameProduct}\"")
					echo "Заменен 'allureResultsDir' на '${env.nameProduct}'"
					
					updatedConfigJson = updatedConfigJson
						.replace('"supplierName"', "\"${params.supplierName}\"")
					echo "Заменен 'supplierName' на '${params.supplierName}'"
					
					echo "Итоговый updatedConfigJson:"
					echo "${updatedConfigJson}"
					
					// Записываем результат
					echo "Записываем обновленный конфиг в ${vaParamsjson}"
					writeFile(file: vaParamsjson, text: updatedConfigJson)
					echo "Запись успешно завершена"
        		}
            }
        }
        stage('Выполнение тестирования') {
            steps {
                script {
                    powershell """
                    chcp 65001
                    & "${env.platformPath}" /N"Админ" /TestManager /Execute "C:\\VA_Test\\vanessa-automation\\vanessa-automation.epf" /IBConnectionString "Srvr=""localhost"";Ref=""${params.dbName}"";" /C"StartFeaturePlayer;QuietInstallVanessaExt;VAParams=${vaParamsjson}"
                    """
                }
            }
        }
        stage('Генерация Allure отчета') {
            steps {
                script {
                    allure([
                        includeProperties: false,
                        jdk: '',
                        results: [[path: "results"]]
                    ])
                    
                }
            }
        }
    }
        // post {
        //     always {
        //         script {
        //             def configJson = readFile(file: 'tests/notifications/config.json')
        //             def updatedConfigJson = configJson
        //                 .replace('"${allureReportUrl}"', "\"${env.allureReportUrl}\"")
        //                 .replace('"${JOB_NAME}"', "\"${env.JOB_NAME}\"")
        //                 .replace('"${logo}"', "\"${env.logo}\"")
        //             writeFile(file: 'tests/notifications/config.json', text: updatedConfigJson)

        //             // Запускаем allure-notifications
        //             sh '''
        //             java "-DconfigFile=tests/notifications/config.json" \
        //             "-Dhttp.connection.timeout=30000" \
        //             "-Dhttp.socket.timeout=60000" \
        //             -jar tests/notifications/allure-notifications-4.8.0.jar
        //             '''
        //         }
        //     }
        // }
}

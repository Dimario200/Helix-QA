pipeline {
    agent {
        label "OneS"
    }
	triggers {
        cron('H 20 * * *')  // Запускать каждый день в 20:00
    }
	environment {
        InitDatabase = "tests/scripts/InitDatabase.bat"
		dbTests = "avtotestqa"
    }
    stages {
		stage("Подготовка и создание БД") {
			steps {
				script {
					def success = false
					try {
						// Первая попытка (с ретраем)
						retry(3) {
							runPreparationSteps()
							success = true // Успех после успешного выполнения
						}
					} catch (Exception firstFail) {
						echo "❌ Первая серия попыток не удалась. Перезапускаем службу агента 1С..."

						// Перезапуск службы
						try {
							bat """
							powershell -Command "Stop-Service -Name '1C:Enterprise 8.3 Server Agent (x86-64)' -Force"
							timeout /t 3
							powershell -Command "Start-Service -Name '1C:Enterprise 8.3 Server Agent (x86-64)'"
							timeout /t 3
							"""
						} catch (Exception serviceError) {
							error("❌ Не удалось перезапустить службу агента 1С: ${serviceError.message}")
						}

						// Вторая попытка, однократная
						try {
							runPreparationSteps() // Повторная попытка подготовки БД
							success = true
							echo "✅ Повторное выполнение успешно"
						} catch (Exception secondFail) {
							error("❌ Повтор после перезапуска службы тоже не удался: ${secondFail.message}")
						}
					}

					// Если после всех попыток не удалось выполнить
					if (!success) {
						error("⛔ Не удалось выполнить подготовку БД после всех попыток")
					}
				}
			}
		}
        stage('Сценарное тестирвоание') {
            steps {
                script {
					try{
					runDbOperation("session_kill", "\"${env.dbTests}\"") // Отключение пользователей от базы данных	
						runDbOperation("vanessa", "\"${env.WORKSPACE}\" \"${params.TestPathPlaceholder}\" \"${env.pathvanessa}\" \"${env.dbTests}\"") // Сценарное тестирование																		
						bat "allure generate tests/build/results -o tests/allure-report --clean" // Генерация Allure отчета													
 					} catch (Exception Exc) {
						echo "Error occurred: ${Exc.message}"
						currentBuild.result = 'UNSTABLE'
          			}
                }
            }
        }
	}
	post {
		always {
			script {
				// Всегда генерируем Allure отчет
				allure([
					includeProperties: false,
					jdk: '',
					results: [['path': 'tests/build/results']]
				])
				
				// Отправка уведомлений только при SUCCESS или UNSTABLE
				if (currentBuild.currentResult == "SUCCESS" || currentBuild.currentResult == "UNSTABLE") {
					// Определяем логотип в зависимости от базы данных
					def logoPath = "tests/notifications/logo.png" // значение по умолчанию
					switch("${params.dbName}") {
						case "VAFitness":
							logoPath = "tests/notifications/logo.png"
							break
						case "VASPA":
							logoPath = "tests/notifications/logo1.png"
							break
						case "VAStoma":
							logoPath = "tests/notifications/logo2.png"
							break
					}
					env.logo = logoPath

					// Формируем URL для Allure отчета
					def allureReportUrl = "${env.JENKINS_URL}job/${env.JOB_NAME.replaceAll('/', '/job/')}/${env.BUILD_NUMBER}/allure"
					
					// Обновляем конфигурационный файл для уведомлений
					def configJson = readFile(file: 'tests/notifications/config.json')
					def updatedConfigJson = configJson
						.replace('"${allureReportUrl}"', "\"${allureReportUrl}\"")
						.replace('"${JOB_NAME}"', "\"${env.JOB_NAME}\"")
						.replace('"${logo}"', "\"${env.logo}\"")
					writeFile(file: 'tests/notifications/config.json', text: updatedConfigJson)

					// Отправляем уведомление с обработкой возможных ошибок
					try {
						bat """java "-DconfigFile=tests/notifications/config.json" "-Dhttp.connection.timeout=60000" "-Dhttp.socket.timeout=120000" -jar tests/notifications/allure-notifications-4.8.0.jar"""
					} catch (Exception e) {
						echo "Ошибка при отправке уведомления: ${e.message}. Продолжаем выполнение pipeline."
					}
				} else {
					echo "Сборка завершилась со статусом ${currentBuild.currentResult}. Уведомление не отправляется."
				}
			}
		}
		
		failure {
			echo "Stage 'Подготовка и создание БД' завершился с ошибкой после всех попыток"
			// Дополнительные действия при окончательном падении
		}
		
		success {
			echo "Stage 'Подготовка и создание БД' успешно завершен"
		}
	}
}
def runDbOperation(operation, params) {
		try {
			bat """
				chcp 65001
				@call ${env.InitDatabase} ${operation} ${params}
			"""
		} catch (Exception e) {
			echo "Ошибка при выполнении операции ${operation}: ${e.message}"
			throw e
		}
	}

def updateConfigFile() {
    def configJson = readFile(file: 'tests/tools/VAParams.json')
    def updatedConfigJson = configJson.replaceAll(/\$\{product\}/, params.product)
    writeFile(file: 'tests/tools/VAParams.json', text: updatedConfigJson)
}
		// 1) Этап создание базы 
		// 2) Загрузка .cf из релизного
		// 3) Первоначальное заполнение
		// 4) Сценарное тестирование 
		// 5) Дымовые тесты
		// 6) Синтаксический контроль
		// 7) Сонар 
		// 8) Удаление базы
pipeline {
    agent {
        label "OneS"
    }
	environment {
        InitDatabase = "tests/scripts/InitDatabase.bat"
		dbTests = "AvtotestQA"
    }
    stages {
		stage("Подготовка и создание БД") {
			steps {
				script {

					def runOperation(String operation, String args, String message) {
						echo "[${new Date().format('HH:mm:ss')}] ${message}"
						try {
							runDbOperation(operation, args)
						} catch (Exception e) {
							echo "Ошибка в операции '${message}': ${e.message}"
							throw e 
						}
					}

					// Чтение JSON-конфигурации
					def config = readJSON file: "${env.WORKSPACE}/db_tasks.json"

					// Выполнение обновления конфигурации
					echo "[${new Date().format('HH:mm:ss')}] Начало обновления конфигурационного файла"
					updateConfigFile()


					config.categories.each { category ->
						echo "=== ${category.name} ==="
						category.tasks.each { task ->
							if (!params.skipSteps?.contains(task.operation)) { 
								runOperation(task.operation, task.args, task.message)
							}
						}
					}
				}
			}
		}
        stage('Сценарное тестирвоание') {
            steps {
                script {
					try	{
					// 4.1 Отключение пользователей
					runDbOperation("session_kill", "\"${env.dbTests}\"")
					// 4.2 Сценарное тестирование
					runDbOperation("vanessaTest", "\"${env.WORKSPACE}\" \"${params.TestPathPlaceholder}\" \"${env.pathvanessa}\" \"${env.dbTests}\"")
					// 4.4 Генерация Allure отчета
					runDbOperation("allure")

 					}catch(Exception Exc){
						currentBuild.result = 'UNSTABLE'
					}
                }
            }
        }
	}
	post {
		always {
			script {
				allure([
					includeProperties: false,
					jdk: '',
					results: [['path': 'tests/build/results']]
				])
				// Отправка уведомлений только при SUCCESS или UNSTABLE
				if (currentBuild.currentResult == "SUCCESS" || currentBuild.currentResult == "UNSTABLE") {
					if ("${params.dbName}" == "VAFitness") {
						env.logo = "tests/notifications/logo.png"
					}
					else if ("${params.dbName}" == "VASPA") {
						env.logo = "tests/notifications/logo1.png"
					}
					else if ("${params.dbName}" == "VAStoma") {
						env.logo = "tests/notifications/logo2.png"
					}

					def allureReportUrl = "${env.JENKINS_URL}job/${env.JOB_NAME.replaceAll('/', '/job/')}/${env.BUILD_NUMBER}/allure"
					def configJson = readFile(file: 'tests/notifications/config.json')
					def updatedConfigJson = configJson
						.replace('"${allureReportUrl}"', "\"${allureReportUrl}\"")
						.replace('"${JOB_NAME}"', "\"${env.JOB_NAME}\"")
						.replace('"${logo}"', "\"${env.logo}\"")
					writeFile(file: 'tests/notifications/config.json', text: updatedConfigJson)

					try {
						runDbOperation("notifications")
					}
					catch (Exception e) {
						echo "Ошибка при отправке уведомления: ${e.message}. Продолжаем выполнение pipeline."
					}
				}
			}
		}
	 }
}
def runDbOperation(operation, params) {
		try {
			bat """
				chcp 65001
				@call ${env.InitDatabase} ${operation} ${params}
			"""
		} catch (Exception e) {
			echo "Ошибка при выполнении операции ${operation}: ${e.message}"
			throw e
		}
	}

def updateConfigFile() {
    def configJson = readFile(file: 'tests/tools/VAParams.json')
    def updatedConfigJson = configJson.replaceAll(/\$\{product\}/, params.product)
    writeFile(file: 'tests/tools/VAParams.json', text: updatedConfigJson)
}
		// 1) Этап создание базы 
		// 2) Загрузка .cf из релизного
		// 3) Первоначальное заполнение
		// 4) Сценарное тестирование 
		// 5) Дымовые тесты
		// 6) Синтаксический контроль
		// 7) Сонар 
		// 8) Удаление базы
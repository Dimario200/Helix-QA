import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import java.nio.file.Files
import java.nio.file.Paths

pipeline {
    agent {
        label "OneS"
    }

    environment {
        allureResultsDir = "${env.WORKSPACE.replace('\\', '\\\\')}\\\\results"
        workSpaceDir = "${env.WORKSPACE.replace('\\', '\\\\')}"
        allureReportUrl = "${env.JENKINS_URL}job/${env.JOB_NAME.replaceAll('/', '/job/')}/${env.BUILD_NUMBER}/allure"
		VRUNNER_PATH = 'vrunner'
    }
    stages {
        stage('Обновление информационной базы из релизного хранилища') {
            steps {
                script {
					bat """
					chcp 65001
					@call ${VRUNNER_PATH} session kill --with-nolock --db ${params.dbName} --db-user Админ"
					@call ${VRUNNER_PATH} loadrepo --storage-name ${params.repository} --storage-user ${env.VATest} --ibconnection /Slocalhost/${params.dbName} --db-user Админ"
					@call ${VRUNNER_PATH} updatedb --ibconnection /Slocalhost/${params.dbName} --db-user Админ"
                    """
//                    def messagetestStart = "Автотестирование ${JOB_NAME} сборка #${BUILD_NUMBER} запущено."
//                    httpRequest(url: "https://api.telegram.org/bot${env.botToken}/sendMessage?chat_id=${env.chatId}&text=${URLEncoder.encode(messagetestStart, 'UTF-8')}")
                }
            }
        }
		stage("Инициализация параметров") {
			steps {
				script {
					def variables = [
						"TestPathPlaceholder": params.TestPathPlaceholder,
						"workSpaceDir": params.workSpaceDir,
						"allureResultsDir": params.allureResultsDir,
						"supplierName": params.supplierName
					]

					def replaceVariables(data, vars) {
						if (data instanceof Map) {
							return data.collectEntries { k, v -> [(k): replaceVariables(v, vars)] }
						} else if (data instanceof List) {
							return data.collect { replaceVariables(it, vars) }
						} else if (data instanceof String) {
							vars.each { k, v -> data = data.replace(k, v) }
							return data
						}
						return data
					}

					def filePath = 'tests/tools/VAParams.json'

					// Проверяем существование файла
					if (!new File(filePath).exists()) {
						error "Ошибка: Файл ${filePath} не найден в директории ${new File('.').absolutePath}"
					}

					// Читаем JSON-файл
					def jsonSlurper = new groovy.json.JsonSlurper()
					def jsonData = jsonSlurper.parse(new File(filePath))

					// Применяем замену переменных
					def modifiedJson = replaceVariables(jsonData, variables)

					// Перезаписываем исходный файл
					new File(filePath).text = groovy.json.JsonOutput.prettyPrint(
						groovy.json.JsonOutput.toJson(modifiedJson)
					)

					echo "JSON-файл ${filePath} успешно обновлен"
				}
			}
		}

        stage('Выполнение тестирования') {
            steps {
                script {
                    powershell """
                    chcp 65001
                    & "${params.platformPath}" /N"Админ" /TestManager /Execute "C:\\VA_Test\\vanessa-automation\\vanessa-automation.epf" /IBConnectionString "Srvr=\\"localhost\\";Ref=\\"${params.dbName}\\";" /C"StartFeaturePlayer;QuietInstallVanessaExt;VAParams=${env.vaParamsjson}"
                    """
                }
            }
        }
        stage('Выполнение тестирования') {
            steps {
                script {
                    powershell """
                    chcp 65001
                    & "${env.platformPath}" /N"Админ" /TestManager /Execute "C:\\VA_Test\\vanessa-automation\\vanessa-automation.epf" /IBConnectionString "Srvr=""localhost"";Ref=""${params.dbName}"";" /C"StartFeaturePlayer;QuietInstallVanessaExt;VAParams=${vaParamsjson}"
                    """
                }
            }
        }
        stage('Генерация Allure отчета') {
            steps {
                script {
                    allure([
                        includeProperties: false,
                        jdk: '',
                        results: [[path: "results"]]
                    ])
                    
                }
            }
        }
    }
        // post {
        //     always {
        //         script {
        //             def configJson = readFile(file: 'tests/notifications/config.json')
        //             def updatedConfigJson = configJson
        //                 .replace('"${allureReportUrl}"', "\"${env.allureReportUrl}\"")
        //                 .replace('"${JOB_NAME}"', "\"${env.JOB_NAME}\"")
        //                 .replace('"${logo}"', "\"${env.logo}\"")
        //             writeFile(file: 'tests/notifications/config.json', text: updatedConfigJson)

        //             // Запускаем allure-notifications
        //             sh '''
        //             java "-DconfigFile=tests/notifications/config.json" \
        //             "-Dhttp.connection.timeout=30000" \
        //             "-Dhttp.socket.timeout=60000" \
        //             -jar tests/notifications/allure-notifications-4.8.0.jar
        //             '''
        //         }
        //     }
        // }
}

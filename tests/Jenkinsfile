pipeline {
    agent {
        label "OneS"
    }
    stages {
        stage('Обновление информационной базы из релизного хранилища') {
            steps {
                script {
					bat """
					chcp 65001
					@call vrunner session kill --with-nolock --db ${params.dbName} --db-user Админ"
					@call vrunner loadrepo --storage-name ${params.repository} --storage-user ${env.VATest} --ibconnection /Slocalhost/${params.dbName} --db-user Админ"
					@call vrunner updatedb --ibconnection /Slocalhost/${params.dbName} --db-user Админ"
                    """
                //   def messagetestStart = "Автотестирование ${JOB_NAME} сборка #${BUILD_NUMBER} запущено."
                //   httpRequest(url: "https://api.telegram.org/bot${env.botToken}/sendMessage?chat_id=${env.chatId}&text=${URLEncoder.encode(messagetestStart, 'UTF-8')}")
                }
            }
        }
        stage('Сценарное тестирвоание') {
            steps {
                script {
				def configJsonparams = readFile(file: './tools/VAParams.json')
				def updatedConfigJsonparams = configJsonparams
					.replace('"${product}"', "\"${params.product}\"")
				writeFile(file: './tools/VAParams.json', text: updatedConfigJsonparams)
                    bat """
                    chcp 65001
                    @call vrunner vanessa --path "${env.WORKSPACE}${params.TestPathPlaceholder}" --vanessasettings ./tools/VAParams.json --workspace tests --pathvanessa C:/VA_test/vanessa-automation/vanessa-automation.epf --additional "/DisplayAllFunctions /L ru" --ibconnection /Slocalhost/${params.dbName} --db-user Админ --additional-keys ЗавершитьРаботуСистемы
					allure generate tests/results -o tests/allure-report --clean
					"""
                }
            }
        }
	}
	post {
		always {
			script {
				def allureReportUrl = "${env.JENKINS_URL}job/${env.JOB_NAME.replaceAll('/', '/job/')}/${env.BUILD_NUMBER}/allure"
				def configJson = readFile(file: 'tests/notifications/config.json')
				def updatedConfigJson = configJson
					.replace('"${allureReportUrl}"', "\"${allureReportUrl}\"")
					.replace('"${JOB_NAME}"', "\"${env.JOB_NAME}\"")
					.replace('"${logo}"', "\"${env.logo}\"")
				writeFile(file: 'tests/notifications/config.json', text: updatedConfigJson)
				// Генерация алюр
				allure([
					includeProperties: false,
					jdk: '',
					results: [['path': 'tests/results']]
				])
				// Запускаем allure-notifications
				sh '''
				java "-DconfigFile=tests/notifications/config.json" \
				"-Dhttp.connection.timeout=60000" \
				"-Dhttp.socket.timeout=120000" \
				-jar tests/notifications/allure-notifications-4.8.0.jar
				'''
            }
        }
    }
}

pipeline {
    agent {
        label "OneS"
    }
    environment {
        InitDatabase = "tests/scripts/InitDatabase.bat"
        dbTests = "AvtotestQA"
    }
    stages {
        stage("Подготовка и создание БД") {
            steps {
                script {
                    runStageFromJson("Подготовка и создание БД", "${env.WORKSPACE}/tests/tools/db_tasks.json") {
                        echo "[${new Date().format('HH:mm:ss')}] Начало обновления конфигурационного файла"
                        updateConfigFile()
                    }
                }
            }
        }
        stage("Сценарное тестирование") {
            steps {
                script {
                    runStageFromJson("Сценарное тестирование", "${env.WORKSPACE}/tests/tools/test_tasks.json")
                }
            }
        }
        // stage("Дымовые тесты") {
        //     steps {
        //         script {
        //             runStageFromJson("Дымовые тесты", "${env.WORKSPACE}/tests/tools/smoke_tasks.json")
        //         }
        //     }
        // }
        // stage("Синтаксический контроль") {
        //     steps {
        //         script {
        //             runStageFromJson("Синтаксический контроль", "${env.WORKSPACE}/tests/tools/syntax_tasks.json")
        //         }
        //     }
        // }
        // stage("Сонар") {
        //     steps {
        //         script {
        //             runStageFromJson("Сонар", "${env.WORKSPACE}/tests/tools/sonar_tasks.json")
        //         }
        //     }
        // }
        // stage("Удаление базы") {
        //     steps {
        //         script {
        //             runStageFromJson("Удаление базы", "${env.WORKSPACE}/tests/tools/drop_tasks.json")
        //         }
        //     }
        // }
    }
    post {
        always {
            script {
                allure([
                    includeProperties: false,
                    jdk: '',
                    results: [['path': 'tests/build/results']]
                ])
                if (currentBuild.currentResult in ["SUCCESS", "UNSTABLE"]) {
                    def logoMap = [
                        "VAFitness": "tests/notifications/logo.png",
                        "VASPA": "tests/notifications/logo1.png",
                        "VAStoma": "tests/notifications/logo2.png"
                    ]
                    env.logo = logoMap[params.dbName] ?: "tests/notifications/default_logo.png"

                    def allureReportUrl = "${env.JENKINS_URL}job/${env.JOB_NAME.replaceAll('/', '/job/')}/${env.BUILD_NUMBER}/allure"
                    def configJson = readFile(file: 'tests/notifications/config.json')
                    def updatedConfigJson = configJson
                        .replace('"${allureReportUrl}"', "\"${allureReportUrl}\"")
                        .replace('"${JOB_NAME}"', "\"${env.JOB_NAME}\"")
                        .replace('"${logo}"', "\"${env.logo}\"")
                    writeFile(file: 'tests/notifications/config.json', text: updatedConfigJson)

                    try {
                        runDbOperation("notifications")
                    } catch (Exception e) {
                        echo "Ошибка при отправке уведомления: ${e.message}"
                    }
                }
            }
        }
    }
}

// Вспомогательная функция для выполнения операций
def runOperation(String operation, String args, String message) {
    echo "[${new Date().format('HH:mm:ss')}] ${message}"
    try {
        runDbOperation(operation, args)
    } catch (Exception e) {
        echo "Ошибка в операции '${message}': ${e.message}"
        throw e
    }
}

// Вспомогательная функция для выполнения этапа из JSON
def runStageFromJson(String stageName, String jsonFile, Closure preSteps = {}) {
    echo "=== ${stageName} ==="
    try {
        def config = readJSON file: jsonFile
        preSteps() // Выполнение предварительных шагов, если есть
        config.categories.each { category ->
            echo "=== ${category.name} ==="
            category.tasks.each { task ->
                if (!params.skipSteps?.contains(task.operation)) {
                    runOperation(task.operation, task.args, task.message)
                }
            }
        }
    } catch (Exception e) {
        currentBuild.result = 'UNSTABLE'
        echo "Ошибка в этапе '${stageName}': ${e.message}"
    }
}

// Выполнение операции через bat
def runDbOperation(String operation, params = "") {
    try {
        bat """
            chcp 65001
            @call ${env.InitDatabase} ${operation} ${params}
        """
    } catch (Exception e) {
        echo "Ошибка при выполнении операции ${operation}: ${e.message}"
        throw e
    }
}

// Обновление конфигурационного файла
def updateConfigFile() {
    def configJson = readFile(file: 'tests/tools/VAParams.json')
    def updatedConfigJson = configJson.replaceAll(/\$\{product\}/, params.product)
    writeFile(file: 'tests/tools/VAParams.json', text: updatedConfigJson)
}
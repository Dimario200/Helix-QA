pipeline {
    agent {
        label "OneS"
    }
    stages {
        // stage('Обновление информационной базы из релизного хранилища') {
        //     steps {
        //         script {
		// 			bat """
		// 			chcp 65001
		// 			@call vrunner session kill --with-nolock --db ${params.dbName} --db-user Админ"
		// 			@call vrunner loadrepo --storage-name ${params.repository} --storage-user ${env.VATest} --ibconnection /Slocalhost/${params.dbName} --db-user Админ"
		// 			@call vrunner updatedb --ibconnection /Slocalhost/${params.dbName} --db-user Админ"
        //             """
		// 	//		def messagetestStart = "Автотестирование ${JOB_NAME} сборка #${BUILD_NUMBER} запущено."
		// 	//		httpRequest(url: "https://api.telegram.org/bot${env.botToken}/sendMessage?chat_id=${env.chatId}&text=${URLEncoder.encode(messagetestStart, 'UTF-8')}")
        //         }
        //     }
        // }
		stage("Подготовка базы"){
			parallel {
				steps("Создание базы"){
					bat """
					chcp 65001
					@call vrunner create --settings --db-server localhost --name AvtotestQA --dbms PostgreSQL --db-admin postgres --db-admin-pwd postgres
					"""
				}
				steps("Выгрузка .cf из релизного хранилища"){
					bat """
					chcp 65001
					@call vrunner session kill --with-nolock --db ${params.dbName} --db-user Админ"
					@call vrunner unload cf\\1Cv8.cf --ibconnection /Slocalhost/${params.dbName} --db-user Админ
					"""
					}
				}
				steps("Загрузка .cf в новую базу"){
					bat """
					chcp 65001
					@call vrunner load --src cf\\1Cv8.cf --ibconnection /Slocalhost/AvtotestQA
					@call vrunner updatedb --ibconnection /Slocalhost/AvtotestQA
					"""
			}
		}
		stage('Первоначальное заполнение'){
            steps{
                script{
					def configJson = readFile(file: 'tests/tools/VAParams.json')
		 			def updatedConfigJson = configJson.replaceAll(/\$\{product\}/, params.product)
		 			writeFile(file: 'tests/tools/VAParams.json', text: updatedConfigJson)
                    bat """
                    chcp 65001
                    @call vrunner vanessa --path ${env.WORKSPACE}\\tests\\feature\\ПервоначальноеЗаполнение\\${params.product}.feature --pathvanessa ${env.pathvanessa} --ibconnection /Slocalhost/ManageTest --vanessasettings tools/VAParams.json --additional-keys ЗавершитьРаботуСистемы
                    """
                }
            }
		}
		// stage("Загрузка .cf в новую базу"){
		// 	steps{
		// 		bat """
		// 		chcp 65001
		// 		@call ${VRUNNER_PATH} load --src cf\\1Cv8.cf --ibconnection /Slocalhost/udd
		// 		@call ${VRUNNER_PATH} updatedb --ibconnection /Slocalhost/udd
		// 		"""
		// 	}
		// }
		// 1) Этап создание базы 
		// 2) Загрузка .cf из релизного
		// 3) Первоначальное заполнение
		// 4) Сценарное тестирование 
		// 5) Дымовые тесты
		// 6) Синтаксический контроль
		// 7) Сонар 
		// 8) Удаление базы
        // stage('Сценарное тестирвоание') {
        //     steps {
        //         script {
		// 			def configJson = readFile(file: 'tests/tools/VAParams.json')
		// 			def updatedConfigJson = configJson.replaceAll(/\$\{product\}/, params.product)
		// 			writeFile(file: 'tests/tools/VAParams.json', text: updatedConfigJson)
        //             bat """
        //             chcp 65001
        //             @call vrunner vanessa --path "${env.WORKSPACE}${params.TestPathPlaceholder}" --vanessasettings tools/VAParams.json --workspace tests --pathvanessa ${env.pathvanessa} --additional "/DisplayAllFunctions /L ru" --ibconnection /Slocalhost/${params.dbName} --db-user Админ --additional-keys ЗавершитьРаботуСистемы
		// 			allure generate tests/build/results -o tests/allure-report --clean
		// 			"""
        //         }
        //     }
        // }
	}
	// post {
	// 	always {
	// 		script {
	// 			if ("${params.dbName}" == "VAFitness") {
    //                     env.logo = "tests/notifications/logo.png"
    //             }
	// 			else if ("${params.dbName}" == "VASPA"){
	// 				env.logo = "tests/notifications/logo1.png"
	// 			}
	// 			else if ("${params.dbName}" == "VAStoma"){
	// 				env.logo = "tests/notifications/logo2.png"
	// 			}
	// 			def allureReportUrl = "${env.JENKINS_URL}job/${env.JOB_NAME.replaceAll('/', '/job/')}/${env.BUILD_NUMBER}/allure"
	// 			def configJson = readFile(file: 'tests/notifications/config.json')
	// 			def updatedConfigJson = configJson
	// 				.replace('"${allureReportUrl}"', "\"${allureReportUrl}\"")
	// 				.replace('"${JOB_NAME}"', "\"${env.JOB_NAME}\"")
	// 				.replace('"${logo}"', "\"${env.logo}\"")
	// 			writeFile(file: 'tests/notifications/config.json', text: updatedConfigJson)
	// 			// Генерация алюр
	// 			allure([
	// 				includeProperties: false,
	// 				jdk: '',
	// 				results: [['path': 'tests/build/results']]
	// 			])
	// 			try {
	// 			// Запускаем allure-notifications
	// 			bat """
	// 			java "-DconfigFile=tests/notifications/config.json" "-Dhttp.connection.timeout=60000" "-Dhttp.socket.timeout=120000" -jar tests/notifications/allure-notifications-4.8.0.jar
	// 			"""
	// 			}
	// 			catch (Exception e) {
	// 				echo "Ошибка при отправке уведомления: ${e.message}. Продолжаем выполнение pipeline."
	// 			}
    //         }
    //     }
    // }
}

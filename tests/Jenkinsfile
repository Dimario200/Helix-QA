pipeline {
    agent {
        label "OneS"
    }
	triggers {
        cron('H 20 * * *')  // Запускать каждый день в 20:00
    }
	environment {
        InitDatabase = "tests/scripts/InitDatabase.bat"
		dbTests = "avtotestqa"
    }
    stages {
		 stage("Запуск") {
            steps {
                timestamps {
                    script {
                        for (i = 0;  i < templatebasesList.size(); i++) {
                            dbTests = templatebasesList[i]
                            storage1cPath = storages1cPathList[i]
                            testbase = "test_${dbTests}"
                            testbaseConnString = projectHelpers.getConnString(server1c, testbase, agent1cPort)
                            backupPath = "${env.WORKSPACE}/build/temp_${dbTests}_${utils.currentDateStamp()}"

                            // 1. Удаляем тестовую базу из кластера (если он там была) и очищаем клиентский кеш 1с
                            dropDbTasks["dropDbTask_${testbase}"] = dropDbTask(
                                server1c, 
                                server1cPort, 
                                serverSql, 
                                testbase, 
                                admin1cUser, 
                                admin1cPwd,
                                sqluser,
                                sqlPwd
                            )
                            // 2. Делаем sql бекап эталонной базы, которую будем загружать в тестовую базу
                            backupTasks["backupTask_${dbTests}"] = backupTask(
                                serverSql, 
                                dbTests, 
                                backupPath,
                                sqlUser,
                                sqlPwd
                            )
                            // 3. Загружаем sql бекап эталонной базы в тестовую
                            restoreTasks["restoreTask_${testbase}"] = restoreTask(
                                serverSql, 
                                testbase, 
                                backupPath,
                                sqlUser,
                                sqlPwd
                            )
                            // 4. Создаем тестовую базу кластере 1С
                            createDbTasks["createDbTask_${testbase}"] = createDbTask(
                                "${server1c}:${agent1cPort}",
                                serverSql,
                                platform1c,
                                testbase
                            )
                            // 5. Обновляем тестовую базу из хранилища 1С (если применимо)
                            updateDbTasks["updateTask_${testbase}"] = updateDbTask(
                                platform1c,
                                testbase, 
                                storage1cPath, 
                                storageUser, 
                                storagePwd, 
                                testbaseConnString, 
                                admin1cUser, 
                                admin1cPwd
                            )
                            // 6. Запускаем внешнюю обработку 1С, которая очищает базу от всплывающего окна с тем, что база перемещена при старте 1С
                            runHandlers1cTasks["runHandlers1cTask_${testbase}"] = runHandlers1cTask(
                                testbase, 
                                admin1cUser, 
                                admin1cPwd,
                                testbaseConnString
                            )
                        }

                        parallel dropDbTasks
                        parallel backupTasks
                        parallel restoreTasks
                        parallel createDbTasks
                        parallel updateDbTasks
                        parallel runHandlers1cTasks
                    }
                }
            }
        }
		
		
		// stage("Подготовка и создание БД") {
		// 	steps {
		// 		script {
		// 			updateConfigFile()
		// 			bat "python -X utf8 tests/scripts/drop_db.py"                             						// Удаление существующей базы
	
		// 			killSessions(params.dbName)                                              						// Отключение пользователей от базы данных
		// 			runDbOperation("loadrepo", "\"${params.repository}\" \"${env.VATest}\" \"${params.dbName}\"") 	// Загрузка данных из хранилища
		// 			runDbOperation("updatedbRep", "\"${params.dbName}\"")                    						// Обновление конфигурации базы данных
					
		// 			killSessions(params.dbName)                                              // Отключение отключение пользователей
		// 			runDbOperation("unload", "\"${params.dbName}\"")                         // Выгрузка файла .cf из базы данных
		// 			runDbOperation("create", "\"${env.dbTests}\"")                           // Создание новой пустой базы данных
		// 			runDbOperation("restore", "\"${env.dbTests}\"")                          // Загрузка .dt в новую базу
					
		// 			killSessions(env.dbTests)                                               // Отключение пользователей от тестовой базы
		// 			runDbOperation("load", "\"${env.dbTests}\"")                            // Загрузка файла .cf в базу данных
		// 			runDbOperation("updatedb", "\"${env.dbTests}\"")                        // Обновление конфигурации базы данных
		// 		}
		// 	}
		// }
        // stage('Сценарное тестирвоание') {
        //     steps {
        //         script {
		// 			try{
		// 				//runDbOperation("session_kill", "\"${env.dbTests}\"") // Отключение пользователей от базы данных	
		// 				runDbOperation("vanessa", "\"${env.WORKSPACE}\" \"${params.TestPathPlaceholder}\" \"${env.pathvanessa}\" \"${env.dbTests}\"") // Сценарное тестирование																		
		// 				//bat "allure generate tests/build/results -o tests/allure-report --clean" // Генерация Allure отчета													
 		// 			} catch (Exception Exc) {
		// 				echo "Error occurred: ${Exc.message}"
		// 				currentBuild.result = 'UNSTABLE'
        //   			}
        //         }
        //     }
        // }
	}
	post {
		always {
			script {
				
				if (currentBuild.result == "ABORTED") {
                    return
                }

                dir ('tests/build/results') {
                    writeFile file:'environment.properties', text:"Build=${env.BUILD_URL}"
                }

                allure includeProperties: false, jdk: '', results: [[path: 'tests/build/results']]
				// Отправка уведомлений только при SUCCESS или UNSTABLE
				if (currentBuild.currentResult == "SUCCESS" || currentBuild.currentResult == "UNSTABLE") {
					if ("${params.dbName}" == "VAFitness") {
						env.logo = "tests/notifications/logo.png"
					}
					else if ("${params.dbName}" == "VASPA") {
						env.logo = "tests/notifications/logo1.png"
					}
					else if ("${params.dbName}" == "VAStoma") {
						env.logo = "tests/notifications/logo2.png"
					}

					def allureReportUrl = "${env.JENKINS_URL}job/${env.JOB_NAME.replaceAll('/', '/job/')}/${env.BUILD_NUMBER}/allure"
					def configJson = readFile(file: 'tests/notifications/config.json')
					def updatedConfigJson = configJson
						.replace('"${allureReportUrl}"', "\"${allureReportUrl}\"")
						.replace('"${JOB_NAME}"', "\"${env.JOB_NAME}\"")
						.replace('"${logo}"', "\"${env.logo}\"")
					writeFile(file: 'tests/notifications/config.json', text: updatedConfigJson)

					try {
						bat """java "-DconfigFile=tests/notifications/config.json" "-Dhttp.connection.timeout=60000" "-Dhttp.socket.timeout=120000" -jar tests/notifications/allure-notifications-4.8.0.jar"""
					}
					catch (Exception e) {
						echo "Ошибка при отправке уведомления: ${e.message}. Продолжаем выполнение pipeline."
					}
				}
			}
		}
	 }
}
def runDbOperation(operation, params) {
		try {
			bat """
				chcp 65001
				@call ${env.InitDatabase} ${operation} ${params}
			"""
		} catch (Exception e) {
			echo "Ошибка при выполнении операции ${operation}: ${e.message}"
			throw e
		}
	}

def updateConfigFile() {
    def configJson = readFile(file: 'tests/tools/VAParams.json')
    def updatedConfigJson = configJson.replaceAll(/\$\{product\}/, params.product)
    writeFile(file: 'tests/tools/VAParams.json', text: updatedConfigJson)
}
def killSessions(dbName) {
	try {
		runDbOperation("session_kill", "\"${dbName}\"")
	} catch (Exception e) {
		echo "⚠️ Не удалось отключить пользователей от базы ${dbName}: ${e.message}"
	}
}

		// 1) Этап создание базы 
		// 2) Загрузка .cf из релизного
		// 3) Первоначальное заполнение
		// 4) Сценарное тестирование 
		// 5) Дымовые тесты
		// 6) Синтаксический контроль
		// 7) Сонар 
		// 8) Удаление базы
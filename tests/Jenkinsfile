pipeline {
    agent {
        label "OneS"
    }
	environment {
        InitDatabase = "tests/scripts/InitDatabase.bat"
		dbTests = "AvtotestQA"
    }
    stages {
		stage("Подготовка и создание БД") {
			steps {
				script {
					def NAME_EPF = "ConnectedEquipment"
					def VA_EXTENSION = "VAExtension"

					// 1.0 Блокировка ИБ
					runDbOperation("session_lock", "\"${params.dbName}\"")
					// 1.1 Отключение пользователей
					runDbOperation("session_kill", "\"${params.dbName}\"")
					// 1.2 Получение данных из релизного хранилища
					runDbOperation("loadrepo", "\"${params.repository}\" \"${env.VATest}\" \"${params.dbName}\"") 
					// 1.3 Обновление конфигурации БД
					runDbOperation("updatedb", "\"${params.dbName}\"") 
					// 1.4 Выгрузка .cf из релизного хранилища
					runDbOperation("unload", "\"${params.dbName}\"")
					// 1.5 Снятие блокировки сеансов
					runDbOperation("session_unlock", "\"${params.dbName}\"")

					// // 2.0 Создание пустой базы
					// runDbOperation("create", "\"${env.dbTests}\"")

					// runDbOperation("run", "\"${env.WORKSPACE}\" \"${NAME_EPF}\" \"${env.dbTests}\"") // Устанавливаем расширение для разблокировки подключаемого оборудования
					// runDbOperation("run", "\"${env.WORKSPACE}\" \"${VA_EXTENSION}\" \"${env.dbTests}\"") // Устанавливаем расширение VAExtension
					// runDbOperation("load", "\"${env.dbTests}\"") // Загружаем .cf в новую созданную базу
					// runDbOperation("updatedb", "\"${env.dbTests}\"") // Обновляем новую базу
				}
			}
		}
	// 	stage('Первоначальное заполнение'){
    //         steps{
    //             script{
	// 				def configJson = readFile(file: 'tests/tools/VAParams.json')
	// 	 			def updatedConfigJson = configJson.replaceAll(/\$\{product\}/, params.product)
	// 	 			writeFile(file: 'tests/tools/VAParams.json', text: updatedConfigJson)
	// 				bat """
    //                 chcp 65001
    //                 @call vrunner session kill --with-nolock --db AvtotestQA --db-user Админ
	// 				@call vrunner vanessa --path ${env.WORKSPACE}\\tests\\features\\ПервоначальноеЗаполнение\\${params.product}.feature --workspace tests --pathvanessa ${env.pathvanessa} --ibconnection /Slocalhost/MenageTest --vanessasettings tools/VAParams.json --additional-keys ЗавершитьРаботуСистемы
	// 				@call vrunner vanessa --path ${env.WORKSPACE}\\tests\\features\\ПервоначальноеЗаполнение\\Наполнение.feature --workspace tests --pathvanessa ${env.pathvanessa} --ibconnection /Slocalhost/MenageTest --vanessasettings tools/VAParams.json --additional-keys ЗавершитьРаботуСистемы
	// 				"""
    //             }
    //         }
	// 	}
    //     stage('Сценарное тестирвоание') {
    //         steps {
    //             script {
	// 				def configJson = readFile(file: 'tests/tools/VAParams.json')
	// 				def updatedConfigJson = configJson.replaceAll(/\$\{product\}/, params.product)
	// 				writeFile(file: 'tests/tools/VAParams.json', text: updatedConfigJson)
	// 				try	{
	// 					bat """
	// 					chcp 65001
	// 					@call vrunner session kill --with-nolock --db AvtotestQA --db-user Админ
	// 					@call vrunner vanessa --path "${env.WORKSPACE}${params.TestPathPlaceholder}" --vanessasettings tools/VAParams.json --workspace tests --pathvanessa ${env.pathvanessa} --additional "/DisplayAllFunctions /L ru" --ibconnection /Slocalhost/AvtotestQA --db-user Админ --additional-keys ЗавершитьРаботуСистемы
	// 					allure generate tests/build/results -o tests/allure-report --clean
	// 					"""
	// 				} catch(Exception Exc){
	// 					currentBuild.result = 'UNSTABLE'
	// 				}
    //             }
    //         }
    //     }
	// }
	// post {
	// 	always {
	// 		script {
	// 			allure([
	// 				includeProperties: false,
	// 				jdk: '',
	// 				results: [['path': 'tests/build/results']]
	// 			])
	// 			// Отправка уведомлений только при SUCCESS или UNSTABLE
	// 			if (currentBuild.currentResult == "SUCCESS" || currentBuild.currentResult == "UNSTABLE") {
	// 				if ("${params.dbName}" == "VAFitness") {
	// 					env.logo = "tests/notifications/logo.png"
	// 				}
	// 				else if ("${params.dbName}" == "VASPA") {
	// 					env.logo = "tests/notifications/logo1.png"
	// 				}
	// 				else if ("${params.dbName}" == "VAStoma") {
	// 					env.logo = "tests/notifications/logo2.png"
	// 				}

	// 				def allureReportUrl = "${env.JENKINS_URL}job/${env.JOB_NAME.replaceAll('/', '/job/')}/${env.BUILD_NUMBER}/allure"
	// 				def configJson = readFile(file: 'tests/notifications/config.json')
	// 				def updatedConfigJson = configJson
	// 					.replace('"${allureReportUrl}"', "\"${allureReportUrl}\"")
	// 					.replace('"${JOB_NAME}"', "\"${env.JOB_NAME}\"")
	// 					.replace('"${logo}"', "\"${env.logo}\"")
	// 				writeFile(file: 'tests/notifications/config.json', text: updatedConfigJson)

	// 				try {
	// 					bat """
	// 					java "-DconfigFile=tests/notifications/config.json" "-Dhttp.connection.timeout=60000" "-Dhttp.socket.timeout=120000" -jar tests/notifications/allure-notifications-4.8.0.jar
	// 					"""
	// 				}
	// 				catch (Exception e) {
	// 					echo "Ошибка при отправке уведомления: ${e.message}. Продолжаем выполнение pipeline."
	// 				}
	// 			}
	// 		}
	// 	}
	 }
}
def runDbOperation(operation, params) {
		try {
			bat """
				chcp 65001
				@call ${env.InitDatabase} ${operation} ${params}
			"""
		} catch (Exception e) {
			echo "Ошибка при выполнении операции ${operation}: ${e.message}"
			throw e
		}
	}


		// 1) Этап создание базы 
		// 2) Загрузка .cf из релизного
		// 3) Первоначальное заполнение
		// 4) Сценарное тестирование 
		// 5) Дымовые тесты
		// 6) Синтаксический контроль
		// 7) Сонар 
		// 8) Удаление базы
pipeline {
    agent {
        label "${params.jenkinsAgent}"
    }
    environment {
        allureResultsDir = "${env.WORKSPACE}\\results"
        vaParamsjson = 'SERVER-71/env/VAParams.json'    
        allureReportUrl = "${env.JENKINS_URL}job/${env.JOB_NAME.replaceAll('/', '/job/')}/${env.BUILD_NUMBER}/allure"
    }
    stages {
        stage('Обновление информационной базы из релизного хранилища') {
            steps {
                script {
                    sh "python -X utf8 vrunner session kill --with-nolock --db ${params.dbName} --db-user ${env.VATest}"
                    if (params.dbName.contains('VAFitness')) {
                        env.nameProduct = "FITNESS"
                        env.supplierName = "ФитнесКлуб_КОРП"
                        env.repository = "${env.repositoryReleaseFitness}"
                        env.logo = "SERVER-71/notifications/logo.png"
                    }
                    if (params.dbName.contains('VASPA')) {
                        env.nameProduct = "SALON"
                        env.supplierName = "СалонКрасоты_SPA"
                        env.repository = "${env.repositoryReleaseSalon}"
                        env.logo = "SERVER-71/notifications/logo1.png"
                    }
                    if (params.dbName.contains('VAStoma')) {
                        env.nameProduct = "STOMA"
                        env.supplierName = "Стоматология"
                        env.repository = "${env.repositoryReleaseStom}"
                        env.logo = "SERVER-71/notifications/logo2.png"
                    }
                    sh "python -X utf8 vrunner loadrepo --storage-name ${repository} --storage-user ${env.VATest} --ibconnection /Slocalhost/${params.dbName} --db-user ${env.VATest}"
                    sh "python -X utf8 vrunner updatedb --ibconnection /Slocalhost/${params.dbName} --db-user ${env.VATest}"
                }
            }
        }
        stage("Инициализация параметров") {
            steps {
                script {
                    def configJson = readFile(file: vaParamsjson)
                    def updatedConfigJson = configJson
                        .replace('"TestPathPlaceholder"', "\"${params.TestPathPlaceholder}\"")
                        .replace('"workSpaceDir"', "\"${workSpaceDir}\"")
                        .replace('"nameProduct"', "\"${env.nameProduct}\"")
                        .replace('"allureResultsDir"', "\"${env.nameProduct}\"")
                        .replace('"supplierName"', "\"${env.supplierName}\"")
                    writeFile(file: vaParamsjson, text: updatedConfigJson)
                }
            }
        }
        // stage('Отправка сообщения в телеграмм и подготавка JSON') {
        //     steps {
        //         script {
        //             Оповещение о начале тестирования
        //             def messagetestStart = "Автотестирование ${JOB_NAME} сборка #${BUILD_NUMBER} запущено."
        //             httpRequest(url: "https://api.telegram.org/bot${env.botToken}/sendMessage?chat_id=${env.chatId}&text=${URLEncoder.encode(messagetestStart, 'UTF-8')}")
        //         }
        //     }
        // }
        stage('Выполнение тестирования') {
            steps {
                sh "python -X utf8 vrunner vanessa --ibconnection /Slocalhost/${params.dbName} --vanessasettings ${vaParamsjson} --addparam \"--allurereport\""
            }
        }
    }
}
pipeline {
    agent {
        label "${params.jenkinsAgent}"
    }
    environment {
        allureResultsDir = "${env.WORKSPACE.replace('\\', '\\\\')}\\\\results"
        workSpaceDir = "${env.WORKSPACE.replace('\\', '\\\\')}"
        sourceFile = "SERVER-71/Sample_${params.dbName}.json"
        vaParamsjson = 'SERVER-71/VAParams.json'    
        allureReportUrl = "${env.JENKINS_URL}job/${env.JOB_NAME.replaceAll('/', '/job/')}/${env.BUILD_NUMBER}/allure"

    }
    stages {
		stage("Инициализация параметров"){
			steps{
				def configJson = readFile(file: '${vaParamsjson}')
				def updatedConfigJson = configJson
					.replace('"TestPathPlaceholder"', "\"${params.TestPathPlaceholder}\"")
					.replace('"workSpaceDir"', "\"${env.workSpaceDir}\"")
                writeFile(file: '${vaParamsjson}', text: updatedConfigJson)
				}
			}
		stage('Обновление в релизном хранилище') {
			steps {
					relUpdateRep(
						"${VRUNNER_PATH}", 
						"${dbrelease}", 
						"${db_user_release}", 
						"${env.repositoryReleaseFitness}"
					)
				}
            }
    //     stage('Обновление информационной базы из релизного хранилища') {
    //         steps {
    //             script {
    //                 if (params.dbName.contains('VAFitness')) {
    //                     env.vaBase = "localhost/VAFitness"
    //                     env.vaUser = "Админ"
    //                     env.repUser = "VATest"
    //                     env.updateBase = 'SERVER-71/updateBase.py'
    //                     env.logo = "SERVER-71\\\\notifications\\\\logo.png"
    //                 }
    //                 if (params.dbName.contains('VASPA')) {
    //                     def vaBase = "localhost/VASPA"
    //                     def vaUser = "Админ"
    //                     def repUser = "VATest"
    //                     def updateBase = 'SERVER-71/updateBase.py'
    //                     env.logo = "SERVER-71\\\\notifications\\\\logo1.png"

    //                 }
    //                 if (params.dbName.contains('VAStoma')) {
    //                     def vaBase = "localhost/VAStoma"
    //                     def vaUser = "Админ"
    //                     def repUser = "VATest"
    //                     env.logo = "SERVER-71\\\\notifications\\\\logo2.png"

    //             }
    //         }
	// 	}
	// }
    //     stage('Отправка сообщения в телеграмм и подготавка JSON') {
    //         steps {
    //             script {
    //                 //Отправвка сообщения в телеграмм
    //                  def messagetestStart = "Автотестирование ${JOB_NAME} сборка #${BUILD_NUMBER} запущено."
    //                  httpRequest(url: "https://api.telegram.org/bot${env.botToken}/sendMessage?chat_id=${env.chatId}&text=${URLEncoder.encode(messagetestStart, 'UTF-8')}")
    //                 // Формируем VAParams.json
    //                 def script = 'SERVER-71/replace_words.py'
    //                 powershell "python -X utf8 ${script} ${params.TestPathPlaceholder} ${allureResultsDir} ${workSpaceDir} ${sourceFile} ${vaParamsjson}"
    //             }
    //         }
    //     }
    //     stage('Выполнение тестирования') {
    //         steps {
    //             script {
    //                 powershell """
    //                 chcp 65001
    //                 & "${env.platformPath}" /N"Админ" /TestManager /Execute "C:\\VA_Test\\vanessa-automation\\vanessa-automation.epf" /IBConnectionString "Srvr=""localhost"";Ref=""${params.dbName}"";" /C"StartFeaturePlayer;QuietInstallVanessaExt;VAParams=${vaParamsjson}"
    //                 """
    //             }
    //         }
    //     }
    //     stage('Генерация Allure отчета') {
    //         steps {
    //             script {
    //                 allure([
    //                     includeProperties: false,
    //                     jdk: '',
    //                     results: [[path: "results"]]
    //                 ])
                    
    //             }
    //         }
	// 	}
	}
	// 	post {
	// 		always {
	// 			script {
	// 				def configJson = readFile(file: 'SERVER-71/notifications/config.json')
	// 				def updatedConfigJson = configJson
	// 					.replace('"${allureReportUrl}"', "\"${env.allureReportUrl}\"")
	// 					.replace('"${JOB_NAME}"', "\"${env.JOB_NAME}\"")
	// 					.replace('"${logo}"', "\"${env.logo}\"")
	// 				writeFile(file: 'SERVER-71/notifications/config.json', text: updatedConfigJson)

	// 				// Запускаем allure-notifications
	// 				sh '''
	// 				java "-DconfigFile=SERVER-71/notifications/config.json" \
	// 				"-Dhttp.connection.timeout=30000" \
	// 				"-Dhttp.socket.timeout=60000" \
	// 				-jar SERVER-71/notifications/allure-notifications-4.8.0.jar
	// 				'''
	// 			}
	// 		}
	// 	}
}


